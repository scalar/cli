import '@scalar/components/style.css';
import { type ThemeId } from '@scalar/themes';
import { type OpenSwaggerEditorActions, type SwaggerEditorProps } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<SwaggerEditorProps>, {
    handleOpenSwaggerEditor: (action?: OpenSwaggerEditorActions | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    contentUpdate: (value: string) => void;
    import: (value: string) => void;
    changeTheme: (value: ThemeId) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<SwaggerEditorProps>>> & {
    onImport?: ((value: string) => any) | undefined;
    onContentUpdate?: ((value: string) => any) | undefined;
    onChangeTheme?: ((value: ThemeId) => any) | undefined;
}, {}, {}>, {
    "tab-items"?(_: {}): any;
    "editor-input"?(_: {
        ref: string;
        value: string | undefined;
        contentUpdate: (value: string) => void;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SwaggerEditor.vue.d.ts.map