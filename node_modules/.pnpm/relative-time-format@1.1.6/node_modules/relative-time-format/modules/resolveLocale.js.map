{"version":3,"file":"resolveLocale.js","names":["resolveLocale","resolveLocaleForData","locale","options","localeMatcher","resolveLocaleLookup","RangeError","resolvedLocale","parts","split","length","pop","join"],"sources":["../source/resolveLocale.js"],"sourcesContent":["import {\r\n  resolveLocale as resolveLocaleForData\r\n} from './LocaleDataStore.js'\r\n\r\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * @param  {string} locale\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocale(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocale(\"xx-Latn\")\r\n */\r\nexport default function resolveLocale(locale, options = {}) {\r\n  const localeMatcher = options.localeMatcher || 'lookup'\r\n  switch (localeMatcher) {\r\n    case 'lookup':\r\n      return resolveLocaleLookup(locale)\r\n    // \"best fit\" locale matching is not supported.\r\n    // https://github.com/catamphetamine/relative-time-format/issues/2\r\n    case 'best fit':\r\n      // return resolveLocaleBestFit(locale)\r\n      return resolveLocaleLookup(locale)\r\n    default:\r\n      throw new RangeError(`Invalid \"localeMatcher\" option: ${localeMatcher}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * Starts from the most specific locale and gradually\r\n * falls back to less specific ones.\r\n * This is a basic implementation of the \"lookup\" algorithm.\r\n * https://tools.ietf.org/html/rfc4647#section-3.4\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocaleLookup(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocaleLookup(\"xx-Latn\")\r\n */\r\nexport function resolveLocaleLookup(locale) {\r\n  const resolvedLocale = resolveLocaleForData(locale)\r\n  if (resolvedLocale) {\r\n    return resolvedLocale\r\n  }\r\n  // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n  const parts = locale.split('-')\r\n  while (locale.length > 1) {\r\n    parts.pop()\r\n    locale = parts.join('-')\r\n    const resolvedLocale = resolveLocaleForData(locale)\r\n    if (resolvedLocale) {\r\n      return resolvedLocale\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SACEA,aAAa,IAAIC,oBADnB,QAEO,sBAFP;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASD,aAAT,CAAuBE,MAAvB,EAA6C;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC1D,IAAMC,aAAa,GAAGD,OAAO,CAACC,aAAR,IAAyB,QAA/C;;EACA,QAAQA,aAAR;IACE,KAAK,QAAL;MACE,OAAOC,mBAAmB,CAACH,MAAD,CAA1B;IACF;IACA;;IACA,KAAK,UAAL;MACE;MACA,OAAOG,mBAAmB,CAACH,MAAD,CAA1B;;IACF;MACE,MAAM,IAAII,UAAJ,6CAAkDF,aAAlD,EAAN;EATJ;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BH,MAA7B,EAAqC;EAC1C,IAAMK,cAAc,GAAGN,oBAAoB,CAACC,MAAD,CAA3C;;EACA,IAAIK,cAAJ,EAAoB;IAClB,OAAOA,cAAP;EACD,CAJyC,CAK1C;;;EACA,IAAMC,KAAK,GAAGN,MAAM,CAACO,KAAP,CAAa,GAAb,CAAd;;EACA,OAAOP,MAAM,CAACQ,MAAP,GAAgB,CAAvB,EAA0B;IACxBF,KAAK,CAACG,GAAN;IACAT,MAAM,GAAGM,KAAK,CAACI,IAAN,CAAW,GAAX,CAAT;;IACA,IAAML,eAAc,GAAGN,oBAAoB,CAACC,MAAD,CAA3C;;IACA,IAAIK,eAAJ,EAAoB;MAClB,OAAOA,eAAP;IACD;EACF;AACF"}