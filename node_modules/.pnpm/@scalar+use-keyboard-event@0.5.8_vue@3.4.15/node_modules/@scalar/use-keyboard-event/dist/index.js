import { ref, onMounted, onActivated, onDeactivated, computed, watch } from "vue";
function useActive() {
  const isActive = ref(true);
  onMounted(() => isActive.value = true);
  onActivated(() => isActive.value = true);
  onDeactivated(() => isActive.value = false);
  return {
    isActive: computed(() => isActive.value)
  };
}
function useKeyboardEvent({
  element,
  keyList,
  handler,
  type = "keydown",
  withShift = false,
  withCtrlCmd = false,
  withAlt = false,
  ignoreInputElements = false,
  active = () => true
}) {
  const targetEl = computed(() => (element == null ? void 0 : element.value) || "document");
  const { isActive: componentIsActive } = useActive();
  const keys = keyList.map((k) => k.toLocaleLowerCase());
  const eventHandler = (event) => {
    const target = event.target;
    const isInput = ["INPUT", "TEXTAREA", "SELECT"].includes(target.tagName) || target.contentEditable;
    if (
      // Check if the component is active (e.g. in a `<keepalive>`)
      (componentIsActive.value && // Check for command or ctrl keys
      withCtrlCmd ? event.ctrlKey || event.metaKey : !event.ctrlKey && !event.metaKey) && // Check for shift key
      (withShift ? event.shiftKey : !event.shiftKey) && // Check for alt key
      (withAlt ? event.altKey : !event.altKey) && // Check whether or not to ignore inputs
      (!ignoreInputElements || !isInput) && // Check for key match
      keys.includes(event.key.toLocaleLowerCase()) && // Check if itâ€™s currently active
      active()
    ) {
      event.preventDefault();
      handler(event);
    }
  };
  onMounted(() => {
    watch(
      targetEl,
      (value, prevValue) => {
        const prevTarget = prevValue === "document" ? document : prevValue;
        if (prevTarget) {
          prevTarget.removeEventListener(type, eventHandler);
        }
        const target = value === "document" ? document : value;
        if (target) {
          target.addEventListener(type, eventHandler);
        }
      },
      { immediate: true }
    );
  });
  const keyboardShortcut = {
    keyList,
    withShift,
    withCtrlCmd,
    withAlt
  };
  return {
    keyboardShortcut
  };
}
export {
  useKeyboardEvent
};
