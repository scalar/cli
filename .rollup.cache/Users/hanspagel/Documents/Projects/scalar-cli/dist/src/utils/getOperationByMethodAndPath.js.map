{"version":3,"file":"getOperationByMethodAndPath.js","sourceRoot":"","sources":["../../../src/utils/getOperationByMethodAndPath.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,2BAA2B,CACzC,MAAwB,EACxB,MAAc,EACd,IAAY;;IAEZ,2BAA2B;IAC3B,IAAI,MAAA,MAAA,MAAM,CAAC,KAAK,0CAAG,IAAI,CAAC,0CAAG,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;QACjD,OAAO,MAAA,MAAA,MAAM,CAAC,KAAK,0CAAG,IAAI,CAAC,0CAAG,MAAM,CAAC,WAAW,EAAE,CAAC,CAAA;IACrD,CAAC;IAED,+EAA+E;IAE/E,8CAA8C;IAC9C,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,MAAA,MAAM,CAAC,KAAK,mCAAI,EAAE,CAAC;SAC9C,MAAM,CAAC,UAAC,IAAI;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC,CAAC;SACD,GAAG,CAAC,UAAC,aAAa;QACjB,OAAO;YACL,IAAI,EAAE,aAAa;YACnB,KAAK,EAAE,IAAI,MAAM,CACf,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,UAAC,CAAC,EAAE,IAAI,IAAK,OAAA,aAAM,IAAI,YAAS,EAAnB,CAAmB,CAAC,CACtE;SACF,CAAA;IACH,CAAC,CAAC,CAAA;IAEJ,2CAA2C;IAC3C,IAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,UAAC,EAAS;YAAP,KAAK,WAAA;QAAO,OAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IAAhB,CAAgB,CAAC,CAAA;IAEnE,uBAAuB;IACvB,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,EAAE,CAAC;QACtB,OAAO,MAAA,MAAA,MAAM,CAAC,KAAK,0CAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,CAAC,0CAAG,MAAM,CAAC,WAAW,EAAE,CAAC,CAAA;IAClE,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["import type { OpenAPI } from 'openapi-types'\n\nexport function getOperationByMethodAndPath(\n  schema: OpenAPI.Document,\n  method: string,\n  path: string,\n) {\n  // Compare just the strings\n  if (schema.paths?.[path]?.[method.toLowerCase()]) {\n    return schema.paths?.[path]?.[method.toLowerCase()]\n  }\n\n  // Loop through all pathRegex and find the one where the regex matches the path\n\n  // Create a Regex for all paths with variables\n  const pathRegex = Object.keys(schema.paths ?? {})\n    .filter((path) => {\n      return path.includes('{')\n    })\n    .map((operationPath) => {\n      return {\n        path: operationPath,\n        regex: new RegExp(\n          operationPath.replace(/{([^}]+)}/g, (_, name) => `(?<${name}>[^/]+)`),\n        ),\n      }\n    })\n\n  // Find a Regex that matches the given path\n  const matchedPath = pathRegex.find(({ regex }) => regex.test(path))\n\n  // Return the operation\n  if (matchedPath?.path) {\n    return schema.paths?.[matchedPath?.path]?.[method.toLowerCase()]\n  }\n\n  return null\n}\n"]}