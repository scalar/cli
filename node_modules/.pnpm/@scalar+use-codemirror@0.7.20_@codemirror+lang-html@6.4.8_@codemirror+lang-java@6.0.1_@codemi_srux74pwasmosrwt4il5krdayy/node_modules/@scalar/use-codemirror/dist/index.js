var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import { ref, watch, defineComponent, openBlock, createElementBlock, toRaw } from "vue";
import { html } from "@codemirror/lang-html";
import { java } from "@codemirror/lang-java";
import { javascript } from "@codemirror/lang-javascript";
import { json } from "@codemirror/lang-json";
import { python } from "@codemirror/lang-python";
import { StreamLanguage } from "@codemirror/language";
import { MatchDecorator, Decoration, ViewPlugin, EditorView as EditorView$1, lineNumbers, keymap } from "@codemirror/view";
import { StateEffect } from "@codemirror/state";
import { EditorView } from "codemirror";
import { tags } from "@lezer/highlight";
import { createTheme } from "@uiw/codemirror-themes";
function Context$2(indented, column, type, info, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type;
  this.info = info;
  this.align = align;
  this.prev = prev;
}
function pushContext$2(state, col, type, info) {
  var indent = state.indented;
  if (state.context && state.context.type == "statement" && type != "statement")
    indent = state.context.indented;
  return state.context = new Context$2(indent, col, type, info, null, state.context);
}
function popContext$2(state) {
  var t = state.context.type;
  if (t == ")" || t == "]" || t == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
function typeBefore(stream, state, pos) {
  if (state.prevToken == "variable" || state.prevToken == "type")
    return true;
  if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos)))
    return true;
  if (state.typeAtEndOfLine && stream.column() == stream.indentation())
    return true;
}
function isTopScope(context) {
  for (; ; ) {
    if (!context || context.type == "top")
      return true;
    if (context.type == "}" && context.prev.info != "namespace")
      return false;
    context = context.prev;
  }
}
function clike(parserConfig) {
  var statementIndentUnit = parserConfig.statementIndentUnit, dontAlignCalls = parserConfig.dontAlignCalls, keywords2 = parserConfig.keywords || {}, types2 = parserConfig.types || {}, builtin = parserConfig.builtin || {}, blockKeywords = parserConfig.blockKeywords || {}, defKeywords = parserConfig.defKeywords || {}, atoms2 = parserConfig.atoms || {}, hooks = parserConfig.hooks || {}, multiLineStrings = parserConfig.multiLineStrings, indentStatements = parserConfig.indentStatements !== false, indentSwitch = parserConfig.indentSwitch !== false, namespaceSeparator = parserConfig.namespaceSeparator, isPunctuationChar = parserConfig.isPunctuationChar || /[\[\]{}\(\),;\:\.]/, numberStart = parserConfig.numberStart || /[\d\.]/, number = parserConfig.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i, isOperatorChar2 = parserConfig.isOperatorChar || /[+\-*&%=<>!?|\/]/, isIdentifierChar = parserConfig.isIdentifierChar || /[\w\$_\xa1-\uffff]/, isReservedIdentifier = parserConfig.isReservedIdentifier || false;
  var curPunc2, isDefKeyword;
  function tokenBase2(stream, state) {
    var ch = stream.next();
    if (hooks[ch]) {
      var result = hooks[ch](stream, state);
      if (result !== false)
        return result;
    }
    if (ch == '"' || ch == "'") {
      state.tokenize = tokenString2(ch);
      return state.tokenize(stream, state);
    }
    if (numberStart.test(ch)) {
      stream.backUp(1);
      if (stream.match(number))
        return "number";
      stream.next();
    }
    if (isPunctuationChar.test(ch)) {
      curPunc2 = ch;
      return null;
    }
    if (ch == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment2;
        return tokenComment2(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar2.test(ch)) {
      while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar2)) {
      }
      return "operator";
    }
    stream.eatWhile(isIdentifierChar);
    if (namespaceSeparator)
      while (stream.match(namespaceSeparator))
        stream.eatWhile(isIdentifierChar);
    var cur = stream.current();
    if (contains(keywords2, cur)) {
      if (contains(blockKeywords, cur))
        curPunc2 = "newstatement";
      if (contains(defKeywords, cur))
        isDefKeyword = true;
      return "keyword";
    }
    if (contains(types2, cur))
      return "type";
    if (contains(builtin, cur) || isReservedIdentifier && isReservedIdentifier(cur)) {
      if (contains(blockKeywords, cur))
        curPunc2 = "newstatement";
      return "builtin";
    }
    if (contains(atoms2, cur))
      return "atom";
    return "variable";
  }
  function tokenString2(quote) {
    return function(stream, state) {
      var escaped = false, next, end = false;
      while ((next = stream.next()) != null) {
        if (next == quote && !escaped) {
          end = true;
          break;
        }
        escaped = !escaped && next == "\\";
      }
      if (end || !(escaped || multiLineStrings))
        state.tokenize = null;
      return "string";
    };
  }
  function tokenComment2(stream, state) {
    var maybeEnd = false, ch;
    while (ch = stream.next()) {
      if (ch == "/" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch == "*";
    }
    return "comment";
  }
  function maybeEOL(stream, state) {
    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
  }
  return {
    name: parserConfig.name,
    startState: function(indentUnit) {
      return {
        tokenize: null,
        context: new Context$2(-indentUnit, 0, "top", null, false),
        indented: 0,
        startOfLine: true,
        prevToken: null
      };
    },
    token: function(stream, state) {
      var ctx = state.context;
      if (stream.sol()) {
        if (ctx.align == null)
          ctx.align = false;
        state.indented = stream.indentation();
        state.startOfLine = true;
      }
      if (stream.eatSpace()) {
        maybeEOL(stream, state);
        return null;
      }
      curPunc2 = isDefKeyword = null;
      var style = (state.tokenize || tokenBase2)(stream, state);
      if (style == "comment" || style == "meta")
        return style;
      if (ctx.align == null)
        ctx.align = true;
      if (curPunc2 == ";" || curPunc2 == ":" || curPunc2 == "," && stream.match(/^\s*(?:\/\/.*)?$/, false))
        while (state.context.type == "statement")
          popContext$2(state);
      else if (curPunc2 == "{")
        pushContext$2(state, stream.column(), "}");
      else if (curPunc2 == "[")
        pushContext$2(state, stream.column(), "]");
      else if (curPunc2 == "(")
        pushContext$2(state, stream.column(), ")");
      else if (curPunc2 == "}") {
        while (ctx.type == "statement")
          ctx = popContext$2(state);
        if (ctx.type == "}")
          ctx = popContext$2(state);
        while (ctx.type == "statement")
          ctx = popContext$2(state);
      } else if (curPunc2 == ctx.type)
        popContext$2(state);
      else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc2 != ";" || ctx.type == "statement" && curPunc2 == "newstatement")) {
        pushContext$2(state, stream.column(), "statement", stream.current());
      }
      if (style == "variable" && (state.prevToken == "def" || parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\s*\(/, false)))
        style = "def";
      if (hooks.token) {
        var result = hooks.token(stream, state, style);
        if (result !== void 0)
          style = result;
      }
      if (style == "def" && parserConfig.styleDefs === false)
        style = "variable";
      state.startOfLine = false;
      state.prevToken = isDefKeyword ? "def" : style || curPunc2;
      maybeEOL(stream, state);
      return style;
    },
    indent: function(state, textAfter, context) {
      if (state.tokenize != tokenBase2 && state.tokenize != null || state.typeAtEndOfLine && isTopScope(state.context))
        return null;
      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
      var closing2 = firstChar == ctx.type;
      if (ctx.type == "statement" && firstChar == "}")
        ctx = ctx.prev;
      if (parserConfig.dontIndentStatements)
        while (ctx.type == "statement" && parserConfig.dontIndentStatements.test(ctx.info))
          ctx = ctx.prev;
      if (hooks.indent) {
        var hook = hooks.indent(state, ctx, textAfter, context.unit);
        if (typeof hook == "number")
          return hook;
      }
      var switchBlock = ctx.prev && ctx.prev.info == "switch";
      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {
        while (ctx.type != "top" && ctx.type != "}")
          ctx = ctx.prev;
        return ctx.indented;
      }
      if (ctx.type == "statement")
        return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || context.unit);
      if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
        return ctx.column + (closing2 ? 0 : 1);
      if (ctx.type == ")" && !closing2)
        return ctx.indented + (statementIndentUnit || context.unit);
      return ctx.indented + (closing2 ? 0 : context.unit) + (!closing2 && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? context.unit : 0);
    },
    languageData: {
      indentOnInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
      commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
      autocomplete: Object.keys(keywords2).concat(Object.keys(types2)).concat(Object.keys(builtin)).concat(Object.keys(atoms2)),
      ...parserConfig.languageData
    }
  };
}
function words$1(str) {
  var obj = {}, words2 = str.split(" ");
  for (var i = 0; i < words2.length; ++i)
    obj[words2[i]] = true;
  return obj;
}
function contains(words2, word) {
  if (typeof words2 === "function") {
    return words2(word);
  } else {
    return words2.propertyIsEnumerable(word);
  }
}
var cKeywords = "auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile inline restrict asm fortran";
var cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch class compl concept constexpr const_cast decltype delete dynamic_cast explicit export final friend import module mutable namespace new noexcept not not_eq operator or or_eq override private protected public reinterpret_cast requires static_assert static_cast template this thread_local throw try typeid typename using virtual xor xor_eq";
var objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd @interface @implementation @end @protocol @encode @property @synthesize @dynamic @class @public @package @private @protected @required @optional @try @catch @finally @import @selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";
var objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION  NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";
var basicCTypes = words$1("int long char short double float unsigned signed void bool");
var basicObjCTypes = words$1("SEL instancetype id Class Protocol BOOL");
function cTypes(identifier2) {
  return contains(basicCTypes, identifier2) || /.+_t$/.test(identifier2);
}
function objCTypes(identifier2) {
  return cTypes(identifier2) || contains(basicObjCTypes, identifier2);
}
var cBlockKeywords = "case do else for if switch while struct enum union";
var cDefKeywords = "struct enum union";
function cppHook(stream, state) {
  if (!state.startOfLine)
    return false;
  for (var ch, next = null; ch = stream.peek(); ) {
    if (ch == "\\" && stream.match(/^.$/)) {
      next = cppHook;
      break;
    } else if (ch == "/" && stream.match(/^\/[\/\*]/, false)) {
      break;
    }
    stream.next();
  }
  state.tokenize = next;
  return "meta";
}
function pointerHook(_stream, state) {
  if (state.prevToken == "type")
    return "type";
  return false;
}
function cIsReservedIdentifier(token) {
  if (!token || token.length < 2)
    return false;
  if (token[0] != "_")
    return false;
  return token[1] == "_" || token[1] !== token[1].toLowerCase();
}
function cpp14Literal(stream) {
  stream.eatWhile(/[\w\.']/);
  return "number";
}
function cpp11StringHook(stream, state) {
  stream.backUp(1);
  if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
    var match = stream.match(/^"([^\s\\()]{0,16})\(/);
    if (!match) {
      return false;
    }
    state.cpp11RawStringDelim = match[1];
    state.tokenize = tokenRawString;
    return tokenRawString(stream, state);
  }
  if (stream.match(/^(?:u8|u|U|L)/)) {
    if (stream.match(
      /^["']/,
      /* eat */
      false
    )) {
      return "string";
    }
    return false;
  }
  stream.next();
  return false;
}
function cppLooksLikeConstructor(word) {
  var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
  return lastTwo && lastTwo[1] == lastTwo[2];
}
function tokenAtString(stream, state) {
  var next;
  while ((next = stream.next()) != null) {
    if (next == '"' && !stream.eat('"')) {
      state.tokenize = null;
      break;
    }
  }
  return "string";
}
function tokenRawString(stream, state) {
  var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&");
  var match = stream.match(new RegExp(".*?\\)" + delim + '"'));
  if (match)
    state.tokenize = null;
  else
    stream.skipToEnd();
  return "string";
}
const c = clike({
  name: "c",
  keywords: words$1(cKeywords),
  types: cTypes,
  blockKeywords: words$1(cBlockKeywords),
  defKeywords: words$1(cDefKeywords),
  typeFirstDefinitions: true,
  atoms: words$1("NULL true false"),
  isReservedIdentifier: cIsReservedIdentifier,
  hooks: {
    "#": cppHook,
    "*": pointerHook
  }
});
clike({
  name: "cpp",
  keywords: words$1(cKeywords + " " + cppKeywords),
  types: cTypes,
  blockKeywords: words$1(cBlockKeywords + " class try catch"),
  defKeywords: words$1(cDefKeywords + " class namespace"),
  typeFirstDefinitions: true,
  atoms: words$1("true false NULL nullptr"),
  dontIndentStatements: /^template$/,
  isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
  isReservedIdentifier: cIsReservedIdentifier,
  hooks: {
    "#": cppHook,
    "*": pointerHook,
    "u": cpp11StringHook,
    "U": cpp11StringHook,
    "L": cpp11StringHook,
    "R": cpp11StringHook,
    "0": cpp14Literal,
    "1": cpp14Literal,
    "2": cpp14Literal,
    "3": cpp14Literal,
    "4": cpp14Literal,
    "5": cpp14Literal,
    "6": cpp14Literal,
    "7": cpp14Literal,
    "8": cpp14Literal,
    "9": cpp14Literal,
    token: function(stream, state, style) {
      if (style == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
        return "def";
    }
  },
  namespaceSeparator: "::"
});
clike({
  name: "java",
  keywords: words$1("abstract assert break case catch class const continue default do else enum extends final finally for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),
  types: words$1("var byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),
  blockKeywords: words$1("catch class do else finally for if switch try while"),
  defKeywords: words$1("class interface enum @interface"),
  typeFirstDefinitions: true,
  atoms: words$1("true false null"),
  number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
  hooks: {
    "@": function(stream) {
      if (stream.match("interface", false))
        return false;
      stream.eatWhile(/[\w\$_]/);
      return "meta";
    },
    '"': function(stream, state) {
      if (!stream.match(/""$/))
        return false;
      state.tokenize = tokenTripleString;
      return state.tokenize(stream, state);
    }
  }
});
const csharp = clike({
  name: "csharp",
  keywords: words$1("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in init interface internal is lock namespace new operator out override params private protected public readonly record ref required return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),
  types: words$1("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),
  blockKeywords: words$1("catch class do else finally for foreach if struct switch try while"),
  defKeywords: words$1("class interface namespace record struct var"),
  typeFirstDefinitions: true,
  atoms: words$1("true false null"),
  hooks: {
    "@": function(stream, state) {
      if (stream.eat('"')) {
        state.tokenize = tokenAtString;
        return tokenAtString(stream, state);
      }
      stream.eatWhile(/[\w\$_]/);
      return "meta";
    }
  }
});
function tokenTripleString(stream, state) {
  var escaped = false;
  while (!stream.eol()) {
    if (!escaped && stream.match('"""')) {
      state.tokenize = null;
      break;
    }
    escaped = stream.next() == "\\" && !escaped;
  }
  return "string";
}
function tokenNestedComment(depth) {
  return function(stream, state) {
    var ch;
    while (ch = stream.next()) {
      if (ch == "*" && stream.eat("/")) {
        if (depth == 1) {
          state.tokenize = null;
          break;
        } else {
          state.tokenize = tokenNestedComment(depth - 1);
          return state.tokenize(stream, state);
        }
      } else if (ch == "/" && stream.eat("*")) {
        state.tokenize = tokenNestedComment(depth + 1);
        return state.tokenize(stream, state);
      }
    }
    return "comment";
  };
}
clike({
  name: "scala",
  keywords: words$1(
    /* scala */
    "abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"
  ),
  types: words$1(
    "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
  ),
  multiLineStrings: true,
  blockKeywords: words$1("catch class enum do else finally for forSome if match switch try while"),
  defKeywords: words$1("class enum def object package trait type val var"),
  atoms: words$1("true false null"),
  indentStatements: false,
  indentSwitch: false,
  isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
  hooks: {
    "@": function(stream) {
      stream.eatWhile(/[\w\$_]/);
      return "meta";
    },
    '"': function(stream, state) {
      if (!stream.match('""'))
        return false;
      state.tokenize = tokenTripleString;
      return state.tokenize(stream, state);
    },
    "'": function(stream) {
      if (stream.match(/^(\\[^'\s]+|[^\\'])'/))
        return "character";
      stream.eatWhile(/[\w\$_\xa1-\uffff]/);
      return "atom";
    },
    "=": function(stream, state) {
      var cx = state.context;
      if (cx.type == "}" && cx.align && stream.eat(">")) {
        state.context = new Context$2(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);
        return "operator";
      } else {
        return false;
      }
    },
    "/": function(stream, state) {
      if (!stream.eat("*"))
        return false;
      state.tokenize = tokenNestedComment(1);
      return state.tokenize(stream, state);
    }
  },
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
  }
});
function tokenKotlinString(tripleString) {
  return function(stream, state) {
    var escaped = false, next, end = false;
    while (!stream.eol()) {
      if (!tripleString && !escaped && stream.match('"')) {
        end = true;
        break;
      }
      if (tripleString && stream.match('"""')) {
        end = true;
        break;
      }
      next = stream.next();
      if (!escaped && next == "$" && stream.match("{"))
        stream.skipTo("}");
      escaped = !escaped && next == "\\" && !tripleString;
    }
    if (end || !tripleString)
      state.tokenize = null;
    return "string";
  };
}
const kotlin = clike({
  name: "kotlin",
  keywords: words$1(
    /*keywords*/
    "package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"
  ),
  types: words$1(
    /* package java.lang */
    "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
  ),
  intendSwitch: false,
  indentStatements: false,
  multiLineStrings: true,
  number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
  blockKeywords: words$1("catch class do else finally for if where try while enum"),
  defKeywords: words$1("class val var object interface fun"),
  atoms: words$1("true false null this"),
  hooks: {
    "@": function(stream) {
      stream.eatWhile(/[\w\$_]/);
      return "meta";
    },
    "*": function(_stream, state) {
      return state.prevToken == "." ? "variable" : "operator";
    },
    '"': function(stream, state) {
      state.tokenize = tokenKotlinString(stream.match('""'));
      return state.tokenize(stream, state);
    },
    "/": function(stream, state) {
      if (!stream.eat("*"))
        return false;
      state.tokenize = tokenNestedComment(1);
      return state.tokenize(stream, state);
    },
    indent: function(state, ctx, textAfter, indentUnit) {
      var firstChar = textAfter && textAfter.charAt(0);
      if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
        return state.indented;
      if (state.prevToken == "operator" && textAfter != "}" && state.context.type != "}" || state.prevToken == "variable" && firstChar == "." || (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
        return indentUnit * 2 + ctx.indented;
      if (ctx.align && ctx.type == "}")
        return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit);
    }
  },
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
  }
});
clike({
  name: "shader",
  keywords: words$1("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),
  types: words$1("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),
  blockKeywords: words$1("for while do if else struct"),
  builtin: words$1("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),
  atoms: words$1("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),
  indentSwitch: false,
  hooks: { "#": cppHook }
});
clike({
  name: "nesc",
  keywords: words$1(cKeywords + " as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),
  types: cTypes,
  blockKeywords: words$1(cBlockKeywords),
  atoms: words$1("null true false"),
  hooks: { "#": cppHook }
});
const objectiveC = clike({
  name: "objectivec",
  keywords: words$1(cKeywords + " " + objCKeywords),
  types: objCTypes,
  builtin: words$1(objCBuiltins),
  blockKeywords: words$1(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
  defKeywords: words$1(cDefKeywords + " @interface @implementation @protocol @class"),
  dontIndentStatements: /^@.*$/,
  typeFirstDefinitions: true,
  atoms: words$1("YES NO NULL Nil nil true false nullptr"),
  isReservedIdentifier: cIsReservedIdentifier,
  hooks: {
    "#": cppHook,
    "*": pointerHook
  }
});
clike({
  name: "objectivecpp",
  keywords: words$1(cKeywords + " " + objCKeywords + " " + cppKeywords),
  types: objCTypes,
  builtin: words$1(objCBuiltins),
  blockKeywords: words$1(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
  defKeywords: words$1(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
  dontIndentStatements: /^@.*$|^template$/,
  typeFirstDefinitions: true,
  atoms: words$1("YES NO NULL Nil nil true false nullptr"),
  isReservedIdentifier: cIsReservedIdentifier,
  hooks: {
    "#": cppHook,
    "*": pointerHook,
    "u": cpp11StringHook,
    "U": cpp11StringHook,
    "L": cpp11StringHook,
    "R": cpp11StringHook,
    "0": cpp14Literal,
    "1": cpp14Literal,
    "2": cpp14Literal,
    "3": cpp14Literal,
    "4": cpp14Literal,
    "5": cpp14Literal,
    "6": cpp14Literal,
    "7": cpp14Literal,
    "8": cpp14Literal,
    "9": cpp14Literal,
    token: function(stream, state, style) {
      if (style == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
        return "def";
    }
  },
  namespaceSeparator: "::"
});
clike({
  name: "squirrel",
  keywords: words$1("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),
  types: cTypes,
  blockKeywords: words$1("case catch class else for foreach if switch try while"),
  defKeywords: words$1("function local class"),
  typeFirstDefinitions: true,
  atoms: words$1("true false null"),
  hooks: { "#": cppHook }
});
var stringTokenizer = null;
function tokenCeylonString(type) {
  return function(stream, state) {
    var escaped = false, next, end = false;
    while (!stream.eol()) {
      if (!escaped && stream.match('"') && (type == "single" || stream.match('""'))) {
        end = true;
        break;
      }
      if (!escaped && stream.match("``")) {
        stringTokenizer = tokenCeylonString(type);
        end = true;
        break;
      }
      next = stream.next();
      escaped = type == "single" && !escaped && next == "\\";
    }
    if (end)
      state.tokenize = null;
    return "string";
  };
}
clike({
  name: "ceylon",
  keywords: words$1("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),
  types: function(word) {
    var first = word.charAt(0);
    return first === first.toUpperCase() && first !== first.toLowerCase();
  },
  blockKeywords: words$1("case catch class dynamic else finally for function if interface module new object switch try while"),
  defKeywords: words$1("class dynamic function interface module object package value"),
  builtin: words$1("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),
  isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
  isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
  numberStart: /[\d#$]/,
  number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
  multiLineStrings: true,
  typeFirstDefinitions: true,
  atoms: words$1("true false null larger smaller equal empty finished"),
  indentSwitch: false,
  styleDefs: false,
  hooks: {
    "@": function(stream) {
      stream.eatWhile(/[\w\$_]/);
      return "meta";
    },
    '"': function(stream, state) {
      state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
      return state.tokenize(stream, state);
    },
    "`": function(stream, state) {
      if (!stringTokenizer || !stream.match("`"))
        return false;
      state.tokenize = stringTokenizer;
      stringTokenizer = null;
      return state.tokenize(stream, state);
    },
    "'": function(stream) {
      if (stream.match(/^(\\[^'\s]+|[^\\'])'/))
        return "string.special";
      stream.eatWhile(/[\w\$_\xa1-\uffff]/);
      return "atom";
    },
    token: function(_stream, state, style) {
      if ((style == "variable" || style == "type") && state.prevToken == ".") {
        return "variableName.special";
      }
    }
  },
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
  }
});
function pushInterpolationStack(state) {
  (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
}
function popInterpolationStack(state) {
  return (state.interpolationStack || (state.interpolationStack = [])).pop();
}
function sizeInterpolationStack(state) {
  return state.interpolationStack ? state.interpolationStack.length : 0;
}
function tokenDartString(quote, stream, state, raw) {
  var tripleQuoted = false;
  if (stream.eat(quote)) {
    if (stream.eat(quote))
      tripleQuoted = true;
    else
      return "string";
  }
  function tokenStringHelper(stream2, state2) {
    var escaped = false;
    while (!stream2.eol()) {
      if (!raw && !escaped && stream2.peek() == "$") {
        pushInterpolationStack(state2);
        state2.tokenize = tokenInterpolation$1;
        return "string";
      }
      var next = stream2.next();
      if (next == quote && !escaped && (!tripleQuoted || stream2.match(quote + quote))) {
        state2.tokenize = null;
        break;
      }
      escaped = !raw && !escaped && next == "\\";
    }
    return "string";
  }
  state.tokenize = tokenStringHelper;
  return tokenStringHelper(stream, state);
}
function tokenInterpolation$1(stream, state) {
  stream.eat("$");
  if (stream.eat("{")) {
    state.tokenize = null;
  } else {
    state.tokenize = tokenInterpolationIdentifier;
  }
  return null;
}
function tokenInterpolationIdentifier(stream, state) {
  stream.eatWhile(/[\w_]/);
  state.tokenize = popInterpolationStack(state);
  return "variable";
}
clike({
  name: "dart",
  keywords: words$1("this super static final const abstract class extends external factory implements mixin get native set typedef with enum throw rethrow assert break case continue default in return new deferred async await covariant try catch finally do else for if switch while import library export part of show hide is as extension on yield late required sealed base interface when inline"),
  blockKeywords: words$1("try catch finally do else for if switch while"),
  builtin: words$1("void bool num int double dynamic var String Null Never"),
  atoms: words$1("true false null"),
  hooks: {
    "@": function(stream) {
      stream.eatWhile(/[\w\$_\.]/);
      return "meta";
    },
    // custom string handling to deal with triple-quoted strings and string interpolation
    "'": function(stream, state) {
      return tokenDartString("'", stream, state, false);
    },
    '"': function(stream, state) {
      return tokenDartString('"', stream, state, false);
    },
    "r": function(stream, state) {
      var peek = stream.peek();
      if (peek == "'" || peek == '"') {
        return tokenDartString(stream.next(), stream, state, true);
      }
      return false;
    },
    "}": function(_stream, state) {
      if (sizeInterpolationStack(state) > 0) {
        state.tokenize = popInterpolationStack(state);
        return null;
      }
      return false;
    },
    "/": function(stream, state) {
      if (!stream.eat("*"))
        return false;
      state.tokenize = tokenNestedComment(1);
      return state.tokenize(stream, state);
    },
    token: function(stream, _, style) {
      if (style == "variable") {
        var isUpper = RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$", "g");
        if (isUpper.test(stream.current())) {
          return "type";
        }
      }
    }
  }
});
var atoms$3 = ["false", "nil", "true"];
var specialForms = [
  ".",
  "catch",
  "def",
  "do",
  "if",
  "monitor-enter",
  "monitor-exit",
  "new",
  "quote",
  "recur",
  "set!",
  "throw",
  "try",
  "var"
];
var coreSymbols = [
  "*",
  "*'",
  "*1",
  "*2",
  "*3",
  "*agent*",
  "*allow-unresolved-vars*",
  "*assert*",
  "*clojure-version*",
  "*command-line-args*",
  "*compile-files*",
  "*compile-path*",
  "*compiler-options*",
  "*data-readers*",
  "*default-data-reader-fn*",
  "*e",
  "*err*",
  "*file*",
  "*flush-on-newline*",
  "*fn-loader*",
  "*in*",
  "*math-context*",
  "*ns*",
  "*out*",
  "*print-dup*",
  "*print-length*",
  "*print-level*",
  "*print-meta*",
  "*print-namespace-maps*",
  "*print-readably*",
  "*read-eval*",
  "*reader-resolver*",
  "*source-path*",
  "*suppress-read*",
  "*unchecked-math*",
  "*use-context-classloader*",
  "*verbose-defrecords*",
  "*warn-on-reflection*",
  "+",
  "+'",
  "-",
  "-'",
  "->",
  "->>",
  "->ArrayChunk",
  "->Eduction",
  "->Vec",
  "->VecNode",
  "->VecSeq",
  "-cache-protocol-fn",
  "-reset-methods",
  "..",
  "/",
  "<",
  "<=",
  "=",
  "==",
  ">",
  ">=",
  "EMPTY-NODE",
  "Inst",
  "StackTraceElement->vec",
  "Throwable->map",
  "accessor",
  "aclone",
  "add-classpath",
  "add-watch",
  "agent",
  "agent-error",
  "agent-errors",
  "aget",
  "alength",
  "alias",
  "all-ns",
  "alter",
  "alter-meta!",
  "alter-var-root",
  "amap",
  "ancestors",
  "and",
  "any?",
  "apply",
  "areduce",
  "array-map",
  "as->",
  "aset",
  "aset-boolean",
  "aset-byte",
  "aset-char",
  "aset-double",
  "aset-float",
  "aset-int",
  "aset-long",
  "aset-short",
  "assert",
  "assoc",
  "assoc!",
  "assoc-in",
  "associative?",
  "atom",
  "await",
  "await-for",
  "await1",
  "bases",
  "bean",
  "bigdec",
  "bigint",
  "biginteger",
  "binding",
  "bit-and",
  "bit-and-not",
  "bit-clear",
  "bit-flip",
  "bit-not",
  "bit-or",
  "bit-set",
  "bit-shift-left",
  "bit-shift-right",
  "bit-test",
  "bit-xor",
  "boolean",
  "boolean-array",
  "boolean?",
  "booleans",
  "bound-fn",
  "bound-fn*",
  "bound?",
  "bounded-count",
  "butlast",
  "byte",
  "byte-array",
  "bytes",
  "bytes?",
  "case",
  "cast",
  "cat",
  "char",
  "char-array",
  "char-escape-string",
  "char-name-string",
  "char?",
  "chars",
  "chunk",
  "chunk-append",
  "chunk-buffer",
  "chunk-cons",
  "chunk-first",
  "chunk-next",
  "chunk-rest",
  "chunked-seq?",
  "class",
  "class?",
  "clear-agent-errors",
  "clojure-version",
  "coll?",
  "comment",
  "commute",
  "comp",
  "comparator",
  "compare",
  "compare-and-set!",
  "compile",
  "complement",
  "completing",
  "concat",
  "cond",
  "cond->",
  "cond->>",
  "condp",
  "conj",
  "conj!",
  "cons",
  "constantly",
  "construct-proxy",
  "contains?",
  "count",
  "counted?",
  "create-ns",
  "create-struct",
  "cycle",
  "dec",
  "dec'",
  "decimal?",
  "declare",
  "dedupe",
  "default-data-readers",
  "definline",
  "definterface",
  "defmacro",
  "defmethod",
  "defmulti",
  "defn",
  "defn-",
  "defonce",
  "defprotocol",
  "defrecord",
  "defstruct",
  "deftype",
  "delay",
  "delay?",
  "deliver",
  "denominator",
  "deref",
  "derive",
  "descendants",
  "destructure",
  "disj",
  "disj!",
  "dissoc",
  "dissoc!",
  "distinct",
  "distinct?",
  "doall",
  "dorun",
  "doseq",
  "dosync",
  "dotimes",
  "doto",
  "double",
  "double-array",
  "double?",
  "doubles",
  "drop",
  "drop-last",
  "drop-while",
  "eduction",
  "empty",
  "empty?",
  "ensure",
  "ensure-reduced",
  "enumeration-seq",
  "error-handler",
  "error-mode",
  "eval",
  "even?",
  "every-pred",
  "every?",
  "ex-data",
  "ex-info",
  "extend",
  "extend-protocol",
  "extend-type",
  "extenders",
  "extends?",
  "false?",
  "ffirst",
  "file-seq",
  "filter",
  "filterv",
  "find",
  "find-keyword",
  "find-ns",
  "find-protocol-impl",
  "find-protocol-method",
  "find-var",
  "first",
  "flatten",
  "float",
  "float-array",
  "float?",
  "floats",
  "flush",
  "fn",
  "fn?",
  "fnext",
  "fnil",
  "for",
  "force",
  "format",
  "frequencies",
  "future",
  "future-call",
  "future-cancel",
  "future-cancelled?",
  "future-done?",
  "future?",
  "gen-class",
  "gen-interface",
  "gensym",
  "get",
  "get-in",
  "get-method",
  "get-proxy-class",
  "get-thread-bindings",
  "get-validator",
  "group-by",
  "halt-when",
  "hash",
  "hash-combine",
  "hash-map",
  "hash-ordered-coll",
  "hash-set",
  "hash-unordered-coll",
  "ident?",
  "identical?",
  "identity",
  "if-let",
  "if-not",
  "if-some",
  "ifn?",
  "import",
  "in-ns",
  "inc",
  "inc'",
  "indexed?",
  "init-proxy",
  "inst-ms",
  "inst-ms*",
  "inst?",
  "instance?",
  "int",
  "int-array",
  "int?",
  "integer?",
  "interleave",
  "intern",
  "interpose",
  "into",
  "into-array",
  "ints",
  "io!",
  "isa?",
  "iterate",
  "iterator-seq",
  "juxt",
  "keep",
  "keep-indexed",
  "key",
  "keys",
  "keyword",
  "keyword?",
  "last",
  "lazy-cat",
  "lazy-seq",
  "let",
  "letfn",
  "line-seq",
  "list",
  "list*",
  "list?",
  "load",
  "load-file",
  "load-reader",
  "load-string",
  "loaded-libs",
  "locking",
  "long",
  "long-array",
  "longs",
  "loop",
  "macroexpand",
  "macroexpand-1",
  "make-array",
  "make-hierarchy",
  "map",
  "map-entry?",
  "map-indexed",
  "map?",
  "mapcat",
  "mapv",
  "max",
  "max-key",
  "memfn",
  "memoize",
  "merge",
  "merge-with",
  "meta",
  "method-sig",
  "methods",
  "min",
  "min-key",
  "mix-collection-hash",
  "mod",
  "munge",
  "name",
  "namespace",
  "namespace-munge",
  "nat-int?",
  "neg-int?",
  "neg?",
  "newline",
  "next",
  "nfirst",
  "nil?",
  "nnext",
  "not",
  "not-any?",
  "not-empty",
  "not-every?",
  "not=",
  "ns",
  "ns-aliases",
  "ns-imports",
  "ns-interns",
  "ns-map",
  "ns-name",
  "ns-publics",
  "ns-refers",
  "ns-resolve",
  "ns-unalias",
  "ns-unmap",
  "nth",
  "nthnext",
  "nthrest",
  "num",
  "number?",
  "numerator",
  "object-array",
  "odd?",
  "or",
  "parents",
  "partial",
  "partition",
  "partition-all",
  "partition-by",
  "pcalls",
  "peek",
  "persistent!",
  "pmap",
  "pop",
  "pop!",
  "pop-thread-bindings",
  "pos-int?",
  "pos?",
  "pr",
  "pr-str",
  "prefer-method",
  "prefers",
  "primitives-classnames",
  "print",
  "print-ctor",
  "print-dup",
  "print-method",
  "print-simple",
  "print-str",
  "printf",
  "println",
  "println-str",
  "prn",
  "prn-str",
  "promise",
  "proxy",
  "proxy-call-with-super",
  "proxy-mappings",
  "proxy-name",
  "proxy-super",
  "push-thread-bindings",
  "pvalues",
  "qualified-ident?",
  "qualified-keyword?",
  "qualified-symbol?",
  "quot",
  "rand",
  "rand-int",
  "rand-nth",
  "random-sample",
  "range",
  "ratio?",
  "rational?",
  "rationalize",
  "re-find",
  "re-groups",
  "re-matcher",
  "re-matches",
  "re-pattern",
  "re-seq",
  "read",
  "read-line",
  "read-string",
  "reader-conditional",
  "reader-conditional?",
  "realized?",
  "record?",
  "reduce",
  "reduce-kv",
  "reduced",
  "reduced?",
  "reductions",
  "ref",
  "ref-history-count",
  "ref-max-history",
  "ref-min-history",
  "ref-set",
  "refer",
  "refer-clojure",
  "reify",
  "release-pending-sends",
  "rem",
  "remove",
  "remove-all-methods",
  "remove-method",
  "remove-ns",
  "remove-watch",
  "repeat",
  "repeatedly",
  "replace",
  "replicate",
  "require",
  "reset!",
  "reset-meta!",
  "reset-vals!",
  "resolve",
  "rest",
  "restart-agent",
  "resultset-seq",
  "reverse",
  "reversible?",
  "rseq",
  "rsubseq",
  "run!",
  "satisfies?",
  "second",
  "select-keys",
  "send",
  "send-off",
  "send-via",
  "seq",
  "seq?",
  "seqable?",
  "seque",
  "sequence",
  "sequential?",
  "set",
  "set-agent-send-executor!",
  "set-agent-send-off-executor!",
  "set-error-handler!",
  "set-error-mode!",
  "set-validator!",
  "set?",
  "short",
  "short-array",
  "shorts",
  "shuffle",
  "shutdown-agents",
  "simple-ident?",
  "simple-keyword?",
  "simple-symbol?",
  "slurp",
  "some",
  "some->",
  "some->>",
  "some-fn",
  "some?",
  "sort",
  "sort-by",
  "sorted-map",
  "sorted-map-by",
  "sorted-set",
  "sorted-set-by",
  "sorted?",
  "special-symbol?",
  "spit",
  "split-at",
  "split-with",
  "str",
  "string?",
  "struct",
  "struct-map",
  "subs",
  "subseq",
  "subvec",
  "supers",
  "swap!",
  "swap-vals!",
  "symbol",
  "symbol?",
  "sync",
  "tagged-literal",
  "tagged-literal?",
  "take",
  "take-last",
  "take-nth",
  "take-while",
  "test",
  "the-ns",
  "thread-bound?",
  "time",
  "to-array",
  "to-array-2d",
  "trampoline",
  "transduce",
  "transient",
  "tree-seq",
  "true?",
  "type",
  "unchecked-add",
  "unchecked-add-int",
  "unchecked-byte",
  "unchecked-char",
  "unchecked-dec",
  "unchecked-dec-int",
  "unchecked-divide-int",
  "unchecked-double",
  "unchecked-float",
  "unchecked-inc",
  "unchecked-inc-int",
  "unchecked-int",
  "unchecked-long",
  "unchecked-multiply",
  "unchecked-multiply-int",
  "unchecked-negate",
  "unchecked-negate-int",
  "unchecked-remainder-int",
  "unchecked-short",
  "unchecked-subtract",
  "unchecked-subtract-int",
  "underive",
  "unquote",
  "unquote-splicing",
  "unreduced",
  "unsigned-bit-shift-right",
  "update",
  "update-in",
  "update-proxy",
  "uri?",
  "use",
  "uuid?",
  "val",
  "vals",
  "var-get",
  "var-set",
  "var?",
  "vary-meta",
  "vec",
  "vector",
  "vector-of",
  "vector?",
  "volatile!",
  "volatile?",
  "vreset!",
  "vswap!",
  "when",
  "when-first",
  "when-let",
  "when-not",
  "when-some",
  "while",
  "with-bindings",
  "with-bindings*",
  "with-in-str",
  "with-loading-context",
  "with-local-vars",
  "with-meta",
  "with-open",
  "with-out-str",
  "with-precision",
  "with-redefs",
  "with-redefs-fn",
  "xml-seq",
  "zero?",
  "zipmap"
];
var haveBodyParameter = [
  "->",
  "->>",
  "as->",
  "binding",
  "bound-fn",
  "case",
  "catch",
  "comment",
  "cond",
  "cond->",
  "cond->>",
  "condp",
  "def",
  "definterface",
  "defmethod",
  "defn",
  "defmacro",
  "defprotocol",
  "defrecord",
  "defstruct",
  "deftype",
  "do",
  "doseq",
  "dotimes",
  "doto",
  "extend",
  "extend-protocol",
  "extend-type",
  "fn",
  "for",
  "future",
  "if",
  "if-let",
  "if-not",
  "if-some",
  "let",
  "letfn",
  "locking",
  "loop",
  "ns",
  "proxy",
  "reify",
  "struct-map",
  "some->",
  "some->>",
  "try",
  "when",
  "when-first",
  "when-let",
  "when-not",
  "when-some",
  "while",
  "with-bindings",
  "with-bindings*",
  "with-in-str",
  "with-loading-context",
  "with-local-vars",
  "with-meta",
  "with-open",
  "with-out-str",
  "with-precision",
  "with-redefs",
  "with-redefs-fn"
];
var atom = createLookupMap(atoms$3);
var specialForm = createLookupMap(specialForms);
var coreSymbol = createLookupMap(coreSymbols);
var hasBodyParameter = createLookupMap(haveBodyParameter);
var delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
var numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
var characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;
var qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;
function base(stream, state) {
  if (stream.eatSpace() || stream.eat(","))
    return ["space", null];
  if (stream.match(numberLiteral))
    return [null, "number"];
  if (stream.match(characterLiteral))
    return [null, "string.special"];
  if (stream.eat(/^"/))
    return (state.tokenize = inString)(stream, state);
  if (stream.eat(/^[(\[{]/))
    return ["open", "bracket"];
  if (stream.eat(/^[)\]}]/))
    return ["close", "bracket"];
  if (stream.eat(/^;/)) {
    stream.skipToEnd();
    return ["space", "comment"];
  }
  if (stream.eat(/^[#'@^`~]/))
    return [null, "meta"];
  var matches = stream.match(qualifiedSymbol);
  var symbol = matches && matches[0];
  if (!symbol) {
    stream.next();
    stream.eatWhile(function(c2) {
      return !is(c2, delimiter);
    });
    return [null, "error"];
  }
  if (symbol === "comment" && state.lastToken === "(")
    return (state.tokenize = inComment)(stream, state);
  if (is(symbol, atom) || symbol.charAt(0) === ":")
    return ["symbol", "atom"];
  if (is(symbol, specialForm) || is(symbol, coreSymbol))
    return ["symbol", "keyword"];
  if (state.lastToken === "(")
    return ["symbol", "builtin"];
  return ["symbol", "variable"];
}
function inString(stream, state) {
  var escaped = false, next;
  while (next = stream.next()) {
    if (next === '"' && !escaped) {
      state.tokenize = base;
      break;
    }
    escaped = !escaped && next === "\\";
  }
  return [null, "string"];
}
function inComment(stream, state) {
  var parenthesisCount = 1;
  var next;
  while (next = stream.next()) {
    if (next === ")")
      parenthesisCount--;
    if (next === "(")
      parenthesisCount++;
    if (parenthesisCount === 0) {
      stream.backUp(1);
      state.tokenize = base;
      break;
    }
  }
  return ["space", "comment"];
}
function createLookupMap(words2) {
  var obj = {};
  for (var i = 0; i < words2.length; ++i)
    obj[words2[i]] = true;
  return obj;
}
function is(value, test) {
  if (test instanceof RegExp)
    return test.test(value);
  if (test instanceof Object)
    return test.propertyIsEnumerable(value);
}
const clojure = {
  name: "clojure",
  startState: function() {
    return {
      ctx: { prev: null, start: 0, indentTo: 0 },
      lastToken: null,
      tokenize: base
    };
  },
  token: function(stream, state) {
    if (stream.sol() && typeof state.ctx.indentTo !== "number")
      state.ctx.indentTo = state.ctx.start + 1;
    var typeStylePair = state.tokenize(stream, state);
    var type = typeStylePair[0];
    var style = typeStylePair[1];
    var current = stream.current();
    if (type !== "space") {
      if (state.lastToken === "(" && state.ctx.indentTo === null) {
        if (type === "symbol" && is(current, hasBodyParameter))
          state.ctx.indentTo = state.ctx.start + stream.indentUnit;
        else
          state.ctx.indentTo = "next";
      } else if (state.ctx.indentTo === "next") {
        state.ctx.indentTo = stream.column();
      }
      state.lastToken = current;
    }
    if (type === "open")
      state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
    else if (type === "close")
      state.ctx = state.ctx.prev || state.ctx;
    return style;
  },
  indent: function(state) {
    var i = state.ctx.indentTo;
    return typeof i === "number" ? i : state.ctx.start + 1;
  },
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", '"'] },
    commentTokens: { line: ";;" },
    autocomplete: [].concat(atoms$3, specialForms, coreSymbols)
  }
};
var keywords$4 = {
  "break": true,
  "case": true,
  "chan": true,
  "const": true,
  "continue": true,
  "default": true,
  "defer": true,
  "else": true,
  "fallthrough": true,
  "for": true,
  "func": true,
  "go": true,
  "goto": true,
  "if": true,
  "import": true,
  "interface": true,
  "map": true,
  "package": true,
  "range": true,
  "return": true,
  "select": true,
  "struct": true,
  "switch": true,
  "type": true,
  "var": true,
  "bool": true,
  "byte": true,
  "complex64": true,
  "complex128": true,
  "float32": true,
  "float64": true,
  "int8": true,
  "int16": true,
  "int32": true,
  "int64": true,
  "string": true,
  "uint8": true,
  "uint16": true,
  "uint32": true,
  "uint64": true,
  "int": true,
  "uint": true,
  "uintptr": true,
  "error": true,
  "rune": true,
  "any": true,
  "comparable": true
};
var atoms$2 = {
  "true": true,
  "false": true,
  "iota": true,
  "nil": true,
  "append": true,
  "cap": true,
  "close": true,
  "complex": true,
  "copy": true,
  "delete": true,
  "imag": true,
  "len": true,
  "make": true,
  "new": true,
  "panic": true,
  "print": true,
  "println": true,
  "real": true,
  "recover": true
};
var isOperatorChar = /[+\-*&^%:=<>!|\/]/;
var curPunc$2;
function tokenBase$5(stream, state) {
  var ch = stream.next();
  if (ch == '"' || ch == "'" || ch == "`") {
    state.tokenize = tokenString$3(ch);
    return state.tokenize(stream, state);
  }
  if (/[\d\.]/.test(ch)) {
    if (ch == ".") {
      stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
    } else if (ch == "0") {
      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
    } else {
      stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
    }
    return "number";
  }
  if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
    curPunc$2 = ch;
    return null;
  }
  if (ch == "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment$2;
      return tokenComment$2(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar.test(ch)) {
    stream.eatWhile(isOperatorChar);
    return "operator";
  }
  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
  var cur = stream.current();
  if (keywords$4.propertyIsEnumerable(cur)) {
    if (cur == "case" || cur == "default")
      curPunc$2 = "case";
    return "keyword";
  }
  if (atoms$2.propertyIsEnumerable(cur))
    return "atom";
  return "variable";
}
function tokenString$3(quote) {
  return function(stream, state) {
    var escaped = false, next, end = false;
    while ((next = stream.next()) != null) {
      if (next == quote && !escaped) {
        end = true;
        break;
      }
      escaped = !escaped && quote != "`" && next == "\\";
    }
    if (end || !(escaped || quote == "`"))
      state.tokenize = tokenBase$5;
    return "string";
  };
}
function tokenComment$2(stream, state) {
  var maybeEnd = false, ch;
  while (ch = stream.next()) {
    if (ch == "/" && maybeEnd) {
      state.tokenize = tokenBase$5;
      break;
    }
    maybeEnd = ch == "*";
  }
  return "comment";
}
function Context$1(indented, column, type, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type;
  this.align = align;
  this.prev = prev;
}
function pushContext$1(state, col, type) {
  return state.context = new Context$1(state.indented, col, type, null, state.context);
}
function popContext$1(state) {
  if (!state.context.prev)
    return;
  var t = state.context.type;
  if (t == ")" || t == "]" || t == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
const go = {
  name: "go",
  startState: function(indentUnit) {
    return {
      tokenize: null,
      context: new Context$1(-indentUnit, 0, "top", false),
      indented: 0,
      startOfLine: true
    };
  },
  token: function(stream, state) {
    var ctx = state.context;
    if (stream.sol()) {
      if (ctx.align == null)
        ctx.align = false;
      state.indented = stream.indentation();
      state.startOfLine = true;
      if (ctx.type == "case")
        ctx.type = "}";
    }
    if (stream.eatSpace())
      return null;
    curPunc$2 = null;
    var style = (state.tokenize || tokenBase$5)(stream, state);
    if (style == "comment")
      return style;
    if (ctx.align == null)
      ctx.align = true;
    if (curPunc$2 == "{")
      pushContext$1(state, stream.column(), "}");
    else if (curPunc$2 == "[")
      pushContext$1(state, stream.column(), "]");
    else if (curPunc$2 == "(")
      pushContext$1(state, stream.column(), ")");
    else if (curPunc$2 == "case")
      ctx.type = "case";
    else if (curPunc$2 == "}" && ctx.type == "}")
      popContext$1(state);
    else if (curPunc$2 == ctx.type)
      popContext$1(state);
    state.startOfLine = false;
    return style;
  },
  indent: function(state, textAfter, cx) {
    if (state.tokenize != tokenBase$5 && state.tokenize != null)
      return null;
    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
    if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter))
      return ctx.indented;
    var closing2 = firstChar == ctx.type;
    if (ctx.align)
      return ctx.column + (closing2 ? 0 : 1);
    else
      return ctx.indented + (closing2 ? 0 : cx.unit);
  },
  languageData: {
    indentOnInput: /^\s([{}]|case |default\s*:)$/,
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
  }
};
function failFirstLine(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return "error";
}
function start(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d/)) {
    state.cur = responseStatusCode;
    return "keyword";
  } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
    state.cur = requestPath;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}
function responseStatusCode(stream, state) {
  var code = stream.match(/^\d+/);
  if (!code)
    return failFirstLine(stream, state);
  state.cur = responseStatusText;
  var status = Number(code[0]);
  if (status >= 100 && status < 400) {
    return "atom";
  } else {
    return "error";
  }
}
function responseStatusText(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return null;
}
function requestPath(stream, state) {
  stream.eatWhile(/\S/);
  state.cur = requestProtocol;
  return "string.special";
}
function requestProtocol(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d$/)) {
    state.cur = header;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}
function header(stream) {
  if (stream.sol() && !stream.eat(/[ \t]/)) {
    if (stream.match(/^.*?:/)) {
      return "atom";
    } else {
      stream.skipToEnd();
      return "error";
    }
  } else {
    stream.skipToEnd();
    return "string";
  }
}
function body(stream) {
  stream.skipToEnd();
  return null;
}
const http = {
  name: "http",
  token: function(stream, state) {
    var cur = state.cur;
    if (cur != header && cur != body && stream.eatSpace())
      return null;
    return cur(stream, state);
  },
  blankLine: function(state) {
    state.cur = body;
  },
  startState: function() {
    return { cur: start };
  }
};
function mlLike(parserConfig) {
  var words2 = {
    "as": "keyword",
    "do": "keyword",
    "else": "keyword",
    "end": "keyword",
    "exception": "keyword",
    "fun": "keyword",
    "functor": "keyword",
    "if": "keyword",
    "in": "keyword",
    "include": "keyword",
    "let": "keyword",
    "of": "keyword",
    "open": "keyword",
    "rec": "keyword",
    "struct": "keyword",
    "then": "keyword",
    "type": "keyword",
    "val": "keyword",
    "while": "keyword",
    "with": "keyword"
  };
  var extraWords = parserConfig.extraWords || {};
  for (var prop in extraWords) {
    if (extraWords.hasOwnProperty(prop)) {
      words2[prop] = parserConfig.extraWords[prop];
    }
  }
  var hintWords = [];
  for (var k in words2) {
    hintWords.push(k);
  }
  function tokenBase2(stream, state) {
    var ch = stream.next();
    if (ch === '"') {
      state.tokenize = tokenString2;
      return state.tokenize(stream, state);
    }
    if (ch === "{") {
      if (stream.eat("|")) {
        state.longString = true;
        state.tokenize = tokenLongString;
        return state.tokenize(stream, state);
      }
    }
    if (ch === "(") {
      if (stream.match(/^\*(?!\))/)) {
        state.commentLevel++;
        state.tokenize = tokenComment2;
        return state.tokenize(stream, state);
      }
    }
    if (ch === "~" || ch === "?") {
      stream.eatWhile(/\w/);
      return "variableName.special";
    }
    if (ch === "`") {
      stream.eatWhile(/\w/);
      return "quote";
    }
    if (ch === "/" && parserConfig.slashComments && stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
    if (/\d/.test(ch)) {
      if (ch === "0" && stream.eat(/[bB]/)) {
        stream.eatWhile(/[01]/);
      }
      if (ch === "0" && stream.eat(/[xX]/)) {
        stream.eatWhile(/[0-9a-fA-F]/);
      }
      if (ch === "0" && stream.eat(/[oO]/)) {
        stream.eatWhile(/[0-7]/);
      } else {
        stream.eatWhile(/[\d_]/);
        if (stream.eat(".")) {
          stream.eatWhile(/[\d]/);
        }
        if (stream.eat(/[eE]/)) {
          stream.eatWhile(/[\d\-+]/);
        }
      }
      return "number";
    }
    if (/[+\-*&%=<>!?|@\.~:]/.test(ch)) {
      return "operator";
    }
    if (/[\w\xa1-\uffff]/.test(ch)) {
      stream.eatWhile(/[\w\xa1-\uffff]/);
      var cur = stream.current();
      return words2.hasOwnProperty(cur) ? words2[cur] : "variable";
    }
    return null;
  }
  function tokenString2(stream, state) {
    var next, end = false, escaped = false;
    while ((next = stream.next()) != null) {
      if (next === '"' && !escaped) {
        end = true;
        break;
      }
      escaped = !escaped && next === "\\";
    }
    if (end && !escaped) {
      state.tokenize = tokenBase2;
    }
    return "string";
  }
  function tokenComment2(stream, state) {
    var prev, next;
    while (state.commentLevel > 0 && (next = stream.next()) != null) {
      if (prev === "(" && next === "*")
        state.commentLevel++;
      if (prev === "*" && next === ")")
        state.commentLevel--;
      prev = next;
    }
    if (state.commentLevel <= 0) {
      state.tokenize = tokenBase2;
    }
    return "comment";
  }
  function tokenLongString(stream, state) {
    var prev, next;
    while (state.longString && (next = stream.next()) != null) {
      if (prev === "|" && next === "}")
        state.longString = false;
      prev = next;
    }
    if (!state.longString) {
      state.tokenize = tokenBase2;
    }
    return "string";
  }
  return {
    startState: function() {
      return { tokenize: tokenBase2, commentLevel: 0, longString: false };
    },
    token: function(stream, state) {
      if (stream.eatSpace())
        return null;
      return state.tokenize(stream, state);
    },
    languageData: {
      autocomplete: hintWords,
      commentTokens: {
        line: parserConfig.slashComments ? "//" : void 0,
        block: { open: "(*", close: "*)" }
      }
    }
  };
}
const oCaml = mlLike({
  name: "ocaml",
  extraWords: {
    "and": "keyword",
    "assert": "keyword",
    "begin": "keyword",
    "class": "keyword",
    "constraint": "keyword",
    "done": "keyword",
    "downto": "keyword",
    "external": "keyword",
    "function": "keyword",
    "initializer": "keyword",
    "lazy": "keyword",
    "match": "keyword",
    "method": "keyword",
    "module": "keyword",
    "mutable": "keyword",
    "new": "keyword",
    "nonrec": "keyword",
    "object": "keyword",
    "private": "keyword",
    "sig": "keyword",
    "to": "keyword",
    "try": "keyword",
    "value": "keyword",
    "virtual": "keyword",
    "when": "keyword",
    // builtins
    "raise": "builtin",
    "failwith": "builtin",
    "true": "builtin",
    "false": "builtin",
    // Pervasives builtins
    "asr": "builtin",
    "land": "builtin",
    "lor": "builtin",
    "lsl": "builtin",
    "lsr": "builtin",
    "lxor": "builtin",
    "mod": "builtin",
    "or": "builtin",
    // More Pervasives
    "raise_notrace": "builtin",
    "trace": "builtin",
    "exit": "builtin",
    "print_string": "builtin",
    "print_endline": "builtin",
    "int": "type",
    "float": "type",
    "bool": "type",
    "char": "type",
    "string": "type",
    "unit": "type",
    // Modules
    "List": "builtin"
  }
});
mlLike({
  name: "fsharp",
  extraWords: {
    "abstract": "keyword",
    "assert": "keyword",
    "base": "keyword",
    "begin": "keyword",
    "class": "keyword",
    "default": "keyword",
    "delegate": "keyword",
    "do!": "keyword",
    "done": "keyword",
    "downcast": "keyword",
    "downto": "keyword",
    "elif": "keyword",
    "extern": "keyword",
    "finally": "keyword",
    "for": "keyword",
    "function": "keyword",
    "global": "keyword",
    "inherit": "keyword",
    "inline": "keyword",
    "interface": "keyword",
    "internal": "keyword",
    "lazy": "keyword",
    "let!": "keyword",
    "match": "keyword",
    "member": "keyword",
    "module": "keyword",
    "mutable": "keyword",
    "namespace": "keyword",
    "new": "keyword",
    "null": "keyword",
    "override": "keyword",
    "private": "keyword",
    "public": "keyword",
    "return!": "keyword",
    "return": "keyword",
    "select": "keyword",
    "static": "keyword",
    "to": "keyword",
    "try": "keyword",
    "upcast": "keyword",
    "use!": "keyword",
    "use": "keyword",
    "void": "keyword",
    "when": "keyword",
    "yield!": "keyword",
    "yield": "keyword",
    // Reserved words
    "atomic": "keyword",
    "break": "keyword",
    "checked": "keyword",
    "component": "keyword",
    "const": "keyword",
    "constraint": "keyword",
    "constructor": "keyword",
    "continue": "keyword",
    "eager": "keyword",
    "event": "keyword",
    "external": "keyword",
    "fixed": "keyword",
    "method": "keyword",
    "mixin": "keyword",
    "object": "keyword",
    "parallel": "keyword",
    "process": "keyword",
    "protected": "keyword",
    "pure": "keyword",
    "sealed": "keyword",
    "tailcall": "keyword",
    "trait": "keyword",
    "virtual": "keyword",
    "volatile": "keyword",
    // builtins
    "List": "builtin",
    "Seq": "builtin",
    "Map": "builtin",
    "Set": "builtin",
    "Option": "builtin",
    "int": "builtin",
    "string": "builtin",
    "not": "builtin",
    "true": "builtin",
    "false": "builtin",
    "raise": "builtin",
    "failwith": "builtin"
  },
  slashComments: true
});
mlLike({
  name: "sml",
  extraWords: {
    "abstype": "keyword",
    "and": "keyword",
    "andalso": "keyword",
    "case": "keyword",
    "datatype": "keyword",
    "fn": "keyword",
    "handle": "keyword",
    "infix": "keyword",
    "infixr": "keyword",
    "local": "keyword",
    "nonfix": "keyword",
    "op": "keyword",
    "orelse": "keyword",
    "raise": "keyword",
    "withtype": "keyword",
    "eqtype": "keyword",
    "sharing": "keyword",
    "sig": "keyword",
    "signature": "keyword",
    "structure": "keyword",
    "where": "keyword",
    "true": "keyword",
    "false": "keyword",
    // types
    "int": "builtin",
    "real": "builtin",
    "string": "builtin",
    "char": "builtin",
    "bool": "builtin"
  },
  slashComments: true
});
function buildRegexp(patterns, options) {
  options = options || {};
  var prefix = options.prefix !== void 0 ? options.prefix : "^";
  var suffix = options.suffix !== void 0 ? options.suffix : "\\b";
  for (var i = 0; i < patterns.length; i++) {
    if (patterns[i] instanceof RegExp) {
      patterns[i] = patterns[i].source;
    } else {
      patterns[i] = patterns[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
  }
  return new RegExp(prefix + "(" + patterns.join("|") + ")" + suffix, "i");
}
var notCharacterOrDash = "(?=[^A-Za-z\\d\\-_]|$)";
var varNames = /[\w\-:]/;
var keywords$3 = buildRegexp([
  /begin|break|catch|continue|data|default|do|dynamicparam/,
  /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
  /param|process|return|switch|throw|trap|try|until|where|while/
], { suffix: notCharacterOrDash });
var punctuation = /[\[\]{},;`\\\.]|@[({]/;
var wordOperators = buildRegexp([
  "f",
  /b?not/,
  /[ic]?split/,
  "join",
  /is(not)?/,
  "as",
  /[ic]?(eq|ne|[gl][te])/,
  /[ic]?(not)?(like|match|contains)/,
  /[ic]?replace/,
  /b?(and|or|xor)/
], { prefix: "-" });
var symbolOperators = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
var operators$1 = buildRegexp([wordOperators, symbolOperators], { suffix: "" });
var numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;
var identifiers = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;
var symbolBuiltins = /[A-Z]:|%|\?/i;
var namedBuiltins = buildRegexp([
  /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
  /Checkpoint-Computer/,
  /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
  /Compare-Object/,
  /Complete-Transaction/,
  /Connect-PSSession/,
  /ConvertFrom-(Csv|Json|SecureString|StringData)/,
  /Convert-Path/,
  /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
  /Copy-Item(Property)?/,
  /Debug-Process/,
  /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
  /Disconnect-PSSession/,
  /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
  /(Enter|Exit)-PSSession/,
  /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
  /ForEach-Object/,
  /Format-(Custom|List|Table|Wide)/,
  new RegExp("Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)"),
  /Group-Object/,
  /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
  /ImportSystemModules/,
  /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
  /Join-Path/,
  /Limit-EventLog/,
  /Measure-(Command|Object)/,
  /Move-Item(Property)?/,
  new RegExp("New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)"),
  /Out-(Default|File|GridView|Host|Null|Printer|String)/,
  /Pause/,
  /(Pop|Push)-Location/,
  /Read-Host/,
  /Receive-(Job|PSSession)/,
  /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
  /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
  /Rename-(Computer|Item(Property)?)/,
  /Reset-ComputerMachinePassword/,
  /Resolve-Path/,
  /Restart-(Computer|Service)/,
  /Restore-Computer/,
  /Resume-(Job|Service)/,
  /Save-Help/,
  /Select-(Object|String|Xml)/,
  /Send-MailMessage/,
  new RegExp("Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)"),
  /Show-(Command|ControlPanelItem|EventLog)/,
  /Sort-Object/,
  /Split-Path/,
  /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
  /Stop-(Computer|Job|Process|Service|Transcript)/,
  /Suspend-(Job|Service)/,
  /TabExpansion2/,
  /Tee-Object/,
  /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
  /Trace-Command/,
  /Unblock-File/,
  /Undo-Transaction/,
  /Unregister-(Event|PSSessionConfiguration)/,
  /Update-(FormatData|Help|List|TypeData)/,
  /Use-Transaction/,
  /Wait-(Event|Job|Process)/,
  /Where-Object/,
  /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
  /cd|help|mkdir|more|oss|prompt/,
  /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
  /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
  /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
  /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
  /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
  /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
], { prefix: "", suffix: "" });
var variableBuiltins = buildRegexp([
  /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
  /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
  /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
  /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
  /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
  /WarningPreference|WhatIfPreference/,
  /Event|EventArgs|EventSubscriber|Sender/,
  /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
  /true|false|null/
], { prefix: "\\$", suffix: "" });
var builtins$1 = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });
var grammar = {
  keyword: keywords$3,
  number: numbers,
  operator: operators$1,
  builtin: builtins$1,
  punctuation,
  variable: identifiers
};
function tokenBase$4(stream, state) {
  var parent = state.returnStack[state.returnStack.length - 1];
  if (parent && parent.shouldReturnFrom(state)) {
    state.tokenize = parent.tokenize;
    state.returnStack.pop();
    return state.tokenize(stream, state);
  }
  if (stream.eatSpace()) {
    return null;
  }
  if (stream.eat("(")) {
    state.bracketNesting += 1;
    return "punctuation";
  }
  if (stream.eat(")")) {
    state.bracketNesting -= 1;
    return "punctuation";
  }
  for (var key in grammar) {
    if (stream.match(grammar[key])) {
      return key;
    }
  }
  var ch = stream.next();
  if (ch === "'") {
    return tokenSingleQuoteString(stream, state);
  }
  if (ch === "$") {
    return tokenVariable(stream, state);
  }
  if (ch === '"') {
    return tokenDoubleQuoteString(stream, state);
  }
  if (ch === "<" && stream.eat("#")) {
    state.tokenize = tokenComment$1;
    return tokenComment$1(stream, state);
  }
  if (ch === "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch === "@") {
    var quoteMatch = stream.eat(/["']/);
    if (quoteMatch && stream.eol()) {
      state.tokenize = tokenMultiString;
      state.startQuote = quoteMatch[0];
      return tokenMultiString(stream, state);
    } else if (stream.eol()) {
      return "error";
    } else if (stream.peek().match(/[({]/)) {
      return "punctuation";
    } else if (stream.peek().match(varNames)) {
      return tokenVariable(stream, state);
    }
  }
  return "error";
}
function tokenSingleQuoteString(stream, state) {
  var ch;
  while ((ch = stream.peek()) != null) {
    stream.next();
    if (ch === "'" && !stream.eat("'")) {
      state.tokenize = tokenBase$4;
      return "string";
    }
  }
  return "error";
}
function tokenDoubleQuoteString(stream, state) {
  var ch;
  while ((ch = stream.peek()) != null) {
    if (ch === "$") {
      state.tokenize = tokenStringInterpolation;
      return "string";
    }
    stream.next();
    if (ch === "`") {
      stream.next();
      continue;
    }
    if (ch === '"' && !stream.eat('"')) {
      state.tokenize = tokenBase$4;
      return "string";
    }
  }
  return "error";
}
function tokenStringInterpolation(stream, state) {
  return tokenInterpolation(stream, state, tokenDoubleQuoteString);
}
function tokenMultiStringReturn(stream, state) {
  state.tokenize = tokenMultiString;
  state.startQuote = '"';
  return tokenMultiString(stream, state);
}
function tokenHereStringInterpolation(stream, state) {
  return tokenInterpolation(stream, state, tokenMultiStringReturn);
}
function tokenInterpolation(stream, state, parentTokenize) {
  if (stream.match("$(")) {
    var savedBracketNesting = state.bracketNesting;
    state.returnStack.push({
      /*jshint loopfunc:true */
      shouldReturnFrom: function(state2) {
        return state2.bracketNesting === savedBracketNesting;
      },
      tokenize: parentTokenize
    });
    state.tokenize = tokenBase$4;
    state.bracketNesting += 1;
    return "punctuation";
  } else {
    stream.next();
    state.returnStack.push({
      shouldReturnFrom: function() {
        return true;
      },
      tokenize: parentTokenize
    });
    state.tokenize = tokenVariable;
    return state.tokenize(stream, state);
  }
}
function tokenComment$1(stream, state) {
  var maybeEnd = false, ch;
  while ((ch = stream.next()) != null) {
    if (maybeEnd && ch == ">") {
      state.tokenize = tokenBase$4;
      break;
    }
    maybeEnd = ch === "#";
  }
  return "comment";
}
function tokenVariable(stream, state) {
  var ch = stream.peek();
  if (stream.eat("{")) {
    state.tokenize = tokenVariableWithBraces;
    return tokenVariableWithBraces(stream, state);
  } else if (ch != void 0 && ch.match(varNames)) {
    stream.eatWhile(varNames);
    state.tokenize = tokenBase$4;
    return "variable";
  } else {
    state.tokenize = tokenBase$4;
    return "error";
  }
}
function tokenVariableWithBraces(stream, state) {
  var ch;
  while ((ch = stream.next()) != null) {
    if (ch === "}") {
      state.tokenize = tokenBase$4;
      break;
    }
  }
  return "variable";
}
function tokenMultiString(stream, state) {
  var quote = state.startQuote;
  if (stream.sol() && stream.match(new RegExp(quote + "@"))) {
    state.tokenize = tokenBase$4;
  } else if (quote === '"') {
    while (!stream.eol()) {
      var ch = stream.peek();
      if (ch === "$") {
        state.tokenize = tokenHereStringInterpolation;
        return "string";
      }
      stream.next();
      if (ch === "`") {
        stream.next();
      }
    }
  } else {
    stream.skipToEnd();
  }
  return "string";
}
const powerShell = {
  name: "powershell",
  startState: function() {
    return {
      returnStack: [],
      bracketNesting: 0,
      tokenize: tokenBase$4
    };
  },
  token: function(stream, state) {
    return state.tokenize(stream, state);
  },
  languageData: {
    commentTokens: { line: "#", block: { open: "<#", close: "#>" } }
  }
};
function wordObj$1(words2) {
  var res = {};
  for (var i = 0; i < words2.length; ++i)
    res[words2[i]] = true;
  return res;
}
var commonAtoms$1 = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
var commonBuiltins = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
var commonKeywords$1 = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
var commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];
var atoms$1 = wordObj$1(commonAtoms$1);
var builtins = wordObj$1(commonBuiltins);
var keywords$2 = wordObj$1(commonKeywords$1);
var blockkeywords = wordObj$1(commonBlockKeywords);
var opChars = /[+\-*\/^<>=!&|~$:]/;
var curPunc$1;
function tokenBase$3(stream, state) {
  curPunc$1 = null;
  var ch = stream.next();
  if (ch == "#") {
    stream.skipToEnd();
    return "comment";
  } else if (ch == "0" && stream.eat("x")) {
    stream.eatWhile(/[\da-f]/i);
    return "number";
  } else if (ch == "." && stream.eat(/\d/)) {
    stream.match(/\d*(?:e[+\-]?\d+)?/);
    return "number";
  } else if (/\d/.test(ch)) {
    stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
    return "number";
  } else if (ch == "'" || ch == '"') {
    state.tokenize = tokenString$2(ch);
    return "string";
  } else if (ch == "`") {
    stream.match(/[^`]+`/);
    return "string.special";
  } else if (ch == "." && stream.match(/.(?:[.]|\d+)/)) {
    return "keyword";
  } else if (/[a-zA-Z\.]/.test(ch)) {
    stream.eatWhile(/[\w\.]/);
    var word = stream.current();
    if (atoms$1.propertyIsEnumerable(word))
      return "atom";
    if (keywords$2.propertyIsEnumerable(word)) {
      if (blockkeywords.propertyIsEnumerable(word) && !stream.match(/\s*if(\s+|$)/, false))
        curPunc$1 = "block";
      return "keyword";
    }
    if (builtins.propertyIsEnumerable(word))
      return "builtin";
    return "variable";
  } else if (ch == "%") {
    if (stream.skipTo("%"))
      stream.next();
    return "variableName.special";
  } else if (ch == "<" && stream.eat("-") || ch == "<" && stream.match("<-") || ch == "-" && stream.match(/>>?/)) {
    return "operator";
  } else if (ch == "=" && state.ctx.argList) {
    return "operator";
  } else if (opChars.test(ch)) {
    if (ch == "$")
      return "operator";
    stream.eatWhile(opChars);
    return "operator";
  } else if (/[\(\){}\[\];]/.test(ch)) {
    curPunc$1 = ch;
    if (ch == ";")
      return "punctuation";
    return null;
  } else {
    return null;
  }
}
function tokenString$2(quote) {
  return function(stream, state) {
    if (stream.eat("\\")) {
      var ch = stream.next();
      if (ch == "x")
        stream.match(/^[a-f0-9]{2}/i);
      else if ((ch == "u" || ch == "U") && stream.eat("{") && stream.skipTo("}"))
        stream.next();
      else if (ch == "u")
        stream.match(/^[a-f0-9]{4}/i);
      else if (ch == "U")
        stream.match(/^[a-f0-9]{8}/i);
      else if (/[0-7]/.test(ch))
        stream.match(/^[0-7]{1,2}/);
      return "string.special";
    } else {
      var next;
      while ((next = stream.next()) != null) {
        if (next == quote) {
          state.tokenize = tokenBase$3;
          break;
        }
        if (next == "\\") {
          stream.backUp(1);
          break;
        }
      }
      return "string";
    }
  };
}
var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4;
function push(state, type, stream) {
  state.ctx = {
    type,
    indent: state.indent,
    flags: 0,
    column: stream.column(),
    prev: state.ctx
  };
}
function setFlag(state, flag) {
  var ctx = state.ctx;
  state.ctx = {
    type: ctx.type,
    indent: ctx.indent,
    flags: ctx.flags | flag,
    column: ctx.column,
    prev: ctx.prev
  };
}
function pop(state) {
  state.indent = state.ctx.indent;
  state.ctx = state.ctx.prev;
}
const r = {
  name: "r",
  startState: function(indentUnit) {
    return {
      tokenize: tokenBase$3,
      ctx: {
        type: "top",
        indent: -indentUnit,
        flags: ALIGN_NO
      },
      indent: 0,
      afterIdent: false
    };
  },
  token: function(stream, state) {
    if (stream.sol()) {
      if ((state.ctx.flags & 3) == 0)
        state.ctx.flags |= ALIGN_NO;
      if (state.ctx.flags & BRACELESS)
        pop(state);
      state.indent = stream.indentation();
    }
    if (stream.eatSpace())
      return null;
    var style = state.tokenize(stream, state);
    if (style != "comment" && (state.ctx.flags & ALIGN_NO) == 0)
      setFlag(state, ALIGN_YES);
    if ((curPunc$1 == ";" || curPunc$1 == "{" || curPunc$1 == "}") && state.ctx.type == "block")
      pop(state);
    if (curPunc$1 == "{")
      push(state, "}", stream);
    else if (curPunc$1 == "(") {
      push(state, ")", stream);
      if (state.afterIdent)
        state.ctx.argList = true;
    } else if (curPunc$1 == "[")
      push(state, "]", stream);
    else if (curPunc$1 == "block")
      push(state, "block", stream);
    else if (curPunc$1 == state.ctx.type)
      pop(state);
    else if (state.ctx.type == "block" && style != "comment")
      setFlag(state, BRACELESS);
    state.afterIdent = style == "variable" || style == "keyword";
    return style;
  },
  indent: function(state, textAfter, cx) {
    if (state.tokenize != tokenBase$3)
      return 0;
    var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx, closing2 = firstChar == ctx.type;
    if (ctx.flags & BRACELESS)
      ctx = ctx.prev;
    if (ctx.type == "block")
      return ctx.indent + (firstChar == "{" ? 0 : cx.unit);
    else if (ctx.flags & ALIGN_YES)
      return ctx.column + (closing2 ? 0 : 1);
    else
      return ctx.indent + (closing2 ? 0 : cx.unit);
  },
  languageData: {
    wordChars: ".",
    commentTokens: { line: "#" },
    autocomplete: commonAtoms$1.concat(commonBuiltins, commonKeywords$1)
  }
};
function wordObj(words2) {
  var o = {};
  for (var i = 0, e = words2.length; i < e; ++i)
    o[words2[i]] = true;
  return o;
}
var keywordList = [
  "alias",
  "and",
  "BEGIN",
  "begin",
  "break",
  "case",
  "class",
  "def",
  "defined?",
  "do",
  "else",
  "elsif",
  "END",
  "end",
  "ensure",
  "false",
  "for",
  "if",
  "in",
  "module",
  "next",
  "not",
  "or",
  "redo",
  "rescue",
  "retry",
  "return",
  "self",
  "super",
  "then",
  "true",
  "undef",
  "unless",
  "until",
  "when",
  "while",
  "yield",
  "nil",
  "raise",
  "throw",
  "catch",
  "fail",
  "loop",
  "callcc",
  "caller",
  "lambda",
  "proc",
  "public",
  "protected",
  "private",
  "require",
  "load",
  "require_relative",
  "extend",
  "autoload",
  "__END__",
  "__FILE__",
  "__LINE__",
  "__dir__"
], keywords$1 = wordObj(keywordList);
var indentWords = wordObj([
  "def",
  "class",
  "case",
  "for",
  "while",
  "until",
  "module",
  "catch",
  "loop",
  "proc",
  "begin"
]);
var dedentWords = wordObj(["end", "until"]);
var opening = { "[": "]", "{": "}", "(": ")" };
var closing = { "]": "[", "}": "{", ")": "(" };
var curPunc;
function chain(newtok, stream, state) {
  state.tokenize.push(newtok);
  return newtok(stream, state);
}
function tokenBase$2(stream, state) {
  if (stream.sol() && stream.match("=begin") && stream.eol()) {
    state.tokenize.push(readBlockComment);
    return "comment";
  }
  if (stream.eatSpace())
    return null;
  var ch = stream.next(), m;
  if (ch == "`" || ch == "'" || ch == '"') {
    return chain(readQuoted(ch, "string", ch == '"' || ch == "`"), stream, state);
  } else if (ch == "/") {
    if (regexpAhead(stream))
      return chain(readQuoted(ch, "string.special", true), stream, state);
    else
      return "operator";
  } else if (ch == "%") {
    var style = "string", embed = true;
    if (stream.eat("s"))
      style = "atom";
    else if (stream.eat(/[WQ]/))
      style = "string";
    else if (stream.eat(/[r]/))
      style = "string.special";
    else if (stream.eat(/[wxq]/)) {
      style = "string";
      embed = false;
    }
    var delim = stream.eat(/[^\w\s=]/);
    if (!delim)
      return "operator";
    if (opening.propertyIsEnumerable(delim))
      delim = opening[delim];
    return chain(readQuoted(delim, style, embed, true), stream, state);
  } else if (ch == "#") {
    stream.skipToEnd();
    return "comment";
  } else if (ch == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
    return chain(readHereDoc(m[2], m[1]), stream, state);
  } else if (ch == "0") {
    if (stream.eat("x"))
      stream.eatWhile(/[\da-fA-F]/);
    else if (stream.eat("b"))
      stream.eatWhile(/[01]/);
    else
      stream.eatWhile(/[0-7]/);
    return "number";
  } else if (/\d/.test(ch)) {
    stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
    return "number";
  } else if (ch == "?") {
    while (stream.match(/^\\[CM]-/)) {
    }
    if (stream.eat("\\"))
      stream.eatWhile(/\w/);
    else
      stream.next();
    return "string";
  } else if (ch == ":") {
    if (stream.eat("'"))
      return chain(readQuoted("'", "atom", false), stream, state);
    if (stream.eat('"'))
      return chain(readQuoted('"', "atom", true), stream, state);
    if (stream.eat(/[\<\>]/)) {
      stream.eat(/[\<\>]/);
      return "atom";
    }
    if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
      return "atom";
    }
    if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
      stream.eatWhile(/[\w$\xa1-\uffff]/);
      stream.eat(/[\?\!\=]/);
      return "atom";
    }
    return "operator";
  } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
    stream.eat("@");
    stream.eatWhile(/[\w\xa1-\uffff]/);
    return "propertyName";
  } else if (ch == "$") {
    if (stream.eat(/[a-zA-Z_]/)) {
      stream.eatWhile(/[\w]/);
    } else if (stream.eat(/\d/)) {
      stream.eat(/\d/);
    } else {
      stream.next();
    }
    return "variableName.special";
  } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
    stream.eatWhile(/[\w\xa1-\uffff]/);
    stream.eat(/[\?\!]/);
    if (stream.eat(":"))
      return "atom";
    return "variable";
  } else if (ch == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
    curPunc = "|";
    return null;
  } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
    curPunc = ch;
    return null;
  } else if (ch == "-" && stream.eat(">")) {
    return "operator";
  } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
    var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
    if (ch == "." && !more)
      curPunc = ".";
    return "operator";
  } else {
    return null;
  }
}
function regexpAhead(stream) {
  var start2 = stream.pos, depth = 0, next, found = false, escaped = false;
  while ((next = stream.next()) != null) {
    if (!escaped) {
      if ("[{(".indexOf(next) > -1) {
        depth++;
      } else if ("]})".indexOf(next) > -1) {
        depth--;
        if (depth < 0)
          break;
      } else if (next == "/" && depth == 0) {
        found = true;
        break;
      }
      escaped = next == "\\";
    } else {
      escaped = false;
    }
  }
  stream.backUp(stream.pos - start2);
  return found;
}
function tokenBaseUntilBrace(depth) {
  if (!depth)
    depth = 1;
  return function(stream, state) {
    if (stream.peek() == "}") {
      if (depth == 1) {
        state.tokenize.pop();
        return state.tokenize[state.tokenize.length - 1](stream, state);
      } else {
        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);
      }
    } else if (stream.peek() == "{") {
      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);
    }
    return tokenBase$2(stream, state);
  };
}
function tokenBaseOnce() {
  var alreadyCalled = false;
  return function(stream, state) {
    if (alreadyCalled) {
      state.tokenize.pop();
      return state.tokenize[state.tokenize.length - 1](stream, state);
    }
    alreadyCalled = true;
    return tokenBase$2(stream, state);
  };
}
function readQuoted(quote, style, embed, unescaped) {
  return function(stream, state) {
    var escaped = false, ch;
    if (state.context.type === "read-quoted-paused") {
      state.context = state.context.prev;
      stream.eat("}");
    }
    while ((ch = stream.next()) != null) {
      if (ch == quote && (unescaped || !escaped)) {
        state.tokenize.pop();
        break;
      }
      if (embed && ch == "#" && !escaped) {
        if (stream.eat("{")) {
          if (quote == "}") {
            state.context = { prev: state.context, type: "read-quoted-paused" };
          }
          state.tokenize.push(tokenBaseUntilBrace());
          break;
        } else if (/[@\$]/.test(stream.peek())) {
          state.tokenize.push(tokenBaseOnce());
          break;
        }
      }
      escaped = !escaped && ch == "\\";
    }
    return style;
  };
}
function readHereDoc(phrase, mayIndent) {
  return function(stream, state) {
    if (mayIndent)
      stream.eatSpace();
    if (stream.match(phrase))
      state.tokenize.pop();
    else
      stream.skipToEnd();
    return "string";
  };
}
function readBlockComment(stream, state) {
  if (stream.sol() && stream.match("=end") && stream.eol())
    state.tokenize.pop();
  stream.skipToEnd();
  return "comment";
}
const ruby = {
  name: "ruby",
  startState: function(indentUnit) {
    return {
      tokenize: [tokenBase$2],
      indented: 0,
      context: { type: "top", indented: -indentUnit },
      continuedLine: false,
      lastTok: null,
      varList: false
    };
  },
  token: function(stream, state) {
    curPunc = null;
    if (stream.sol())
      state.indented = stream.indentation();
    var style = state.tokenize[state.tokenize.length - 1](stream, state), kwtype;
    var thisTok = curPunc;
    if (style == "variable") {
      var word = stream.current();
      style = state.lastTok == "." ? "property" : keywords$1.propertyIsEnumerable(stream.current()) ? "keyword" : /^[A-Z]/.test(word) ? "tag" : state.lastTok == "def" || state.lastTok == "class" || state.varList ? "def" : "variable";
      if (style == "keyword") {
        thisTok = word;
        if (indentWords.propertyIsEnumerable(word))
          kwtype = "indent";
        else if (dedentWords.propertyIsEnumerable(word))
          kwtype = "dedent";
        else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())
          kwtype = "indent";
        else if (word == "do" && state.context.indented < state.indented)
          kwtype = "indent";
      }
    }
    if (curPunc || style && style != "comment")
      state.lastTok = thisTok;
    if (curPunc == "|")
      state.varList = !state.varList;
    if (kwtype == "indent" || /[\(\[\{]/.test(curPunc))
      state.context = { prev: state.context, type: curPunc || style, indented: state.indented };
    else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc)) && state.context.prev)
      state.context = state.context.prev;
    if (stream.eol())
      state.continuedLine = curPunc == "\\" || style == "operator";
    return style;
  },
  indent: function(state, textAfter, cx) {
    if (state.tokenize[state.tokenize.length - 1] != tokenBase$2)
      return null;
    var firstChar = textAfter && textAfter.charAt(0);
    var ct = state.context;
    var closed = ct.type == closing[firstChar] || ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
    return ct.indented + (closed ? 0 : cx.unit) + (state.continuedLine ? cx.unit : 0);
  },
  languageData: {
    indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
    commentTokens: { line: "#" },
    autocomplete: keywordList
  }
};
var words = {};
function define(style, dict) {
  for (var i = 0; i < dict.length; i++) {
    words[dict[i]] = style;
  }
}
var commonAtoms = ["true", "false"];
var commonKeywords = [
  "if",
  "then",
  "do",
  "else",
  "elif",
  "while",
  "until",
  "for",
  "in",
  "esac",
  "fi",
  "fin",
  "fil",
  "done",
  "exit",
  "set",
  "unset",
  "export",
  "function"
];
var commonCommands = [
  "ab",
  "awk",
  "bash",
  "beep",
  "cat",
  "cc",
  "cd",
  "chown",
  "chmod",
  "chroot",
  "clear",
  "cp",
  "curl",
  "cut",
  "diff",
  "echo",
  "find",
  "gawk",
  "gcc",
  "get",
  "git",
  "grep",
  "hg",
  "kill",
  "killall",
  "ln",
  "ls",
  "make",
  "mkdir",
  "openssl",
  "mv",
  "nc",
  "nl",
  "node",
  "npm",
  "ping",
  "ps",
  "restart",
  "rm",
  "rmdir",
  "sed",
  "service",
  "sh",
  "shopt",
  "shred",
  "source",
  "sort",
  "sleep",
  "ssh",
  "start",
  "stop",
  "su",
  "sudo",
  "svn",
  "tee",
  "telnet",
  "top",
  "touch",
  "vi",
  "vim",
  "wall",
  "wc",
  "wget",
  "who",
  "write",
  "yes",
  "zsh"
];
define("atom", commonAtoms);
define("keyword", commonKeywords);
define("builtin", commonCommands);
function tokenBase$1(stream, state) {
  if (stream.eatSpace())
    return null;
  var sol = stream.sol();
  var ch = stream.next();
  if (ch === "\\") {
    stream.next();
    return null;
  }
  if (ch === "'" || ch === '"' || ch === "`") {
    state.tokens.unshift(tokenString$1(ch, ch === "`" ? "quote" : "string"));
    return tokenize(stream, state);
  }
  if (ch === "#") {
    if (sol && stream.eat("!")) {
      stream.skipToEnd();
      return "meta";
    }
    stream.skipToEnd();
    return "comment";
  }
  if (ch === "$") {
    state.tokens.unshift(tokenDollar);
    return tokenize(stream, state);
  }
  if (ch === "+" || ch === "=") {
    return "operator";
  }
  if (ch === "-") {
    stream.eat("-");
    stream.eatWhile(/\w/);
    return "attribute";
  }
  if (ch == "<") {
    if (stream.match("<<"))
      return "operator";
    var heredoc = stream.match(/^<-?\s*(?:['"]([^'"]*)['"]|([^'"\s]*))/);
    if (heredoc) {
      state.tokens.unshift(tokenHeredoc(heredoc[1] || heredoc[2]));
      return "string.special";
    }
  }
  if (/\d/.test(ch)) {
    stream.eatWhile(/\d/);
    if (stream.eol() || !/\w/.test(stream.peek())) {
      return "number";
    }
  }
  stream.eatWhile(/[\w-]/);
  var cur = stream.current();
  if (stream.peek() === "=" && /\w+/.test(cur))
    return "def";
  return words.hasOwnProperty(cur) ? words[cur] : null;
}
function tokenString$1(quote, style) {
  var close = quote == "(" ? ")" : quote == "{" ? "}" : quote;
  return function(stream, state) {
    var next, escaped = false;
    while ((next = stream.next()) != null) {
      if (next === close && !escaped) {
        state.tokens.shift();
        break;
      } else if (next === "$" && !escaped && quote !== "'" && stream.peek() != close) {
        escaped = true;
        stream.backUp(1);
        state.tokens.unshift(tokenDollar);
        break;
      } else if (!escaped && quote !== close && next === quote) {
        state.tokens.unshift(tokenString$1(quote, style));
        return tokenize(stream, state);
      } else if (!escaped && /['"]/.test(next) && !/['"]/.test(quote)) {
        state.tokens.unshift(tokenStringStart(next, "string"));
        stream.backUp(1);
        break;
      }
      escaped = !escaped && next === "\\";
    }
    return style;
  };
}
function tokenStringStart(quote, style) {
  return function(stream, state) {
    state.tokens[0] = tokenString$1(quote, style);
    stream.next();
    return tokenize(stream, state);
  };
}
var tokenDollar = function(stream, state) {
  if (state.tokens.length > 1)
    stream.eat("$");
  var ch = stream.next();
  if (/['"({]/.test(ch)) {
    state.tokens[0] = tokenString$1(ch, ch == "(" ? "quote" : ch == "{" ? "def" : "string");
    return tokenize(stream, state);
  }
  if (!/\d/.test(ch))
    stream.eatWhile(/\w/);
  state.tokens.shift();
  return "def";
};
function tokenHeredoc(delim) {
  return function(stream, state) {
    if (stream.sol() && stream.string == delim)
      state.tokens.shift();
    stream.skipToEnd();
    return "string.special";
  };
}
function tokenize(stream, state) {
  return (state.tokens[0] || tokenBase$1)(stream, state);
}
const shell = {
  name: "shell",
  startState: function() {
    return { tokens: [] };
  },
  token: function(stream, state) {
    return tokenize(stream, state);
  },
  languageData: {
    autocomplete: commonAtoms.concat(commonKeywords, commonCommands),
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "#" }
  }
};
function wordSet(words2) {
  var set = {};
  for (var i = 0; i < words2.length; i++)
    set[words2[i]] = true;
  return set;
}
var keywords = wordSet([
  "_",
  "var",
  "let",
  "actor",
  "class",
  "enum",
  "extension",
  "import",
  "protocol",
  "struct",
  "func",
  "typealias",
  "associatedtype",
  "open",
  "public",
  "internal",
  "fileprivate",
  "private",
  "deinit",
  "init",
  "new",
  "override",
  "self",
  "subscript",
  "super",
  "convenience",
  "dynamic",
  "final",
  "indirect",
  "lazy",
  "required",
  "static",
  "unowned",
  "unowned(safe)",
  "unowned(unsafe)",
  "weak",
  "as",
  "is",
  "break",
  "case",
  "continue",
  "default",
  "else",
  "fallthrough",
  "for",
  "guard",
  "if",
  "in",
  "repeat",
  "switch",
  "where",
  "while",
  "defer",
  "return",
  "inout",
  "mutating",
  "nonmutating",
  "isolated",
  "nonisolated",
  "catch",
  "do",
  "rethrows",
  "throw",
  "throws",
  "async",
  "await",
  "try",
  "didSet",
  "get",
  "set",
  "willSet",
  "assignment",
  "associativity",
  "infix",
  "left",
  "none",
  "operator",
  "postfix",
  "precedence",
  "precedencegroup",
  "prefix",
  "right",
  "Any",
  "AnyObject",
  "Type",
  "dynamicType",
  "Self",
  "Protocol",
  "__COLUMN__",
  "__FILE__",
  "__FUNCTION__",
  "__LINE__"
]);
var definingKeywords = wordSet(["var", "let", "actor", "class", "enum", "extension", "import", "protocol", "struct", "func", "typealias", "associatedtype", "for"]);
var atoms = wordSet(["true", "false", "nil", "self", "super", "_"]);
var types = wordSet([
  "Array",
  "Bool",
  "Character",
  "Dictionary",
  "Double",
  "Float",
  "Int",
  "Int8",
  "Int16",
  "Int32",
  "Int64",
  "Never",
  "Optional",
  "Set",
  "String",
  "UInt8",
  "UInt16",
  "UInt32",
  "UInt64",
  "Void"
]);
var operators = "+-/*%=|&<>~^?!";
var punc = ":;,.(){}[]";
var binary = /^\-?0b[01][01_]*/;
var octal = /^\-?0o[0-7][0-7_]*/;
var hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
var decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
var identifier = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
var property = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
var instruction = /^\#[A-Za-z]+/;
var attribute = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
function tokenBase(stream, state, prev) {
  if (stream.sol())
    state.indented = stream.indentation();
  if (stream.eatSpace())
    return null;
  var ch = stream.peek();
  if (ch == "/") {
    if (stream.match("//")) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match("/*")) {
      state.tokenize.push(tokenComment);
      return tokenComment(stream, state);
    }
  }
  if (stream.match(instruction))
    return "builtin";
  if (stream.match(attribute))
    return "attribute";
  if (stream.match(binary))
    return "number";
  if (stream.match(octal))
    return "number";
  if (stream.match(hexadecimal))
    return "number";
  if (stream.match(decimal))
    return "number";
  if (stream.match(property))
    return "property";
  if (operators.indexOf(ch) > -1) {
    stream.next();
    return "operator";
  }
  if (punc.indexOf(ch) > -1) {
    stream.next();
    stream.match("..");
    return "punctuation";
  }
  var stringMatch;
  if (stringMatch = stream.match(/("""|"|')/)) {
    var tokenize2 = tokenString.bind(null, stringMatch[0]);
    state.tokenize.push(tokenize2);
    return tokenize2(stream, state);
  }
  if (stream.match(identifier)) {
    var ident = stream.current();
    if (types.hasOwnProperty(ident))
      return "type";
    if (atoms.hasOwnProperty(ident))
      return "atom";
    if (keywords.hasOwnProperty(ident)) {
      if (definingKeywords.hasOwnProperty(ident))
        state.prev = "define";
      return "keyword";
    }
    if (prev == "define")
      return "def";
    return "variable";
  }
  stream.next();
  return null;
}
function tokenUntilClosingParen() {
  var depth = 0;
  return function(stream, state, prev) {
    var inner = tokenBase(stream, state, prev);
    if (inner == "punctuation") {
      if (stream.current() == "(")
        ++depth;
      else if (stream.current() == ")") {
        if (depth == 0) {
          stream.backUp(1);
          state.tokenize.pop();
          return state.tokenize[state.tokenize.length - 1](stream, state);
        } else
          --depth;
      }
    }
    return inner;
  };
}
function tokenString(openQuote, stream, state) {
  var singleLine = openQuote.length == 1;
  var ch, escaped = false;
  while (ch = stream.peek()) {
    if (escaped) {
      stream.next();
      if (ch == "(") {
        state.tokenize.push(tokenUntilClosingParen());
        return "string";
      }
      escaped = false;
    } else if (stream.match(openQuote)) {
      state.tokenize.pop();
      return "string";
    } else {
      stream.next();
      escaped = ch == "\\";
    }
  }
  if (singleLine) {
    state.tokenize.pop();
  }
  return "string";
}
function tokenComment(stream, state) {
  var ch;
  while (ch = stream.next()) {
    if (ch === "/" && stream.eat("*")) {
      state.tokenize.push(tokenComment);
    } else if (ch === "*" && stream.eat("/")) {
      state.tokenize.pop();
      break;
    }
  }
  return "comment";
}
function Context(prev, align, indented) {
  this.prev = prev;
  this.align = align;
  this.indented = indented;
}
function pushContext(state, stream) {
  var align = stream.match(/^\s*($|\/[\/\*]|[)}\]])/, false) ? null : stream.column() + 1;
  state.context = new Context(state.context, align, state.indented);
}
function popContext(state) {
  if (state.context) {
    state.indented = state.context.indented;
    state.context = state.context.prev;
  }
}
const swift = {
  name: "swift",
  startState: function() {
    return {
      prev: null,
      context: null,
      indented: 0,
      tokenize: []
    };
  },
  token: function(stream, state) {
    var prev = state.prev;
    state.prev = null;
    var tokenize2 = state.tokenize[state.tokenize.length - 1] || tokenBase;
    var style = tokenize2(stream, state, prev);
    if (!style || style == "comment")
      state.prev = prev;
    else if (!state.prev)
      state.prev = style;
    if (style == "punctuation") {
      var bracket = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
      if (bracket)
        (bracket[1] ? popContext : pushContext)(state, stream);
    }
    return style;
  },
  indent: function(state, textAfter, iCx) {
    var cx = state.context;
    if (!cx)
      return 0;
    var closing2 = /^[\]\}\)]/.test(textAfter);
    if (cx.align != null)
      return cx.align - (closing2 ? 1 : 0);
    return cx.indented + (closing2 ? 0 : iCx.unit);
  },
  languageData: {
    indentOnInput: /^\s*[\)\}\]]$/,
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
  }
};
var cons = ["true", "false", "on", "off", "yes", "no"];
var keywordRegex = new RegExp("\\b((" + cons.join(")|(") + "))$", "i");
const yaml = {
  name: "yaml",
  token: function(stream, state) {
    var ch = stream.peek();
    var esc = state.escaped;
    state.escaped = false;
    if (ch == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
      return "string";
    if (state.literal && stream.indentation() > state.keyCol) {
      stream.skipToEnd();
      return "string";
    } else if (state.literal) {
      state.literal = false;
    }
    if (stream.sol()) {
      state.keyCol = 0;
      state.pair = false;
      state.pairStart = false;
      if (stream.match("---")) {
        return "def";
      }
      if (stream.match("...")) {
        return "def";
      }
      if (stream.match(/^\s*-\s+/)) {
        return "meta";
      }
    }
    if (stream.match(/^(\{|\}|\[|\])/)) {
      if (ch == "{")
        state.inlinePairs++;
      else if (ch == "}")
        state.inlinePairs--;
      else if (ch == "[")
        state.inlineList++;
      else
        state.inlineList--;
      return "meta";
    }
    if (state.inlineList > 0 && !esc && ch == ",") {
      stream.next();
      return "meta";
    }
    if (state.inlinePairs > 0 && !esc && ch == ",") {
      state.keyCol = 0;
      state.pair = false;
      state.pairStart = false;
      stream.next();
      return "meta";
    }
    if (state.pairStart) {
      if (stream.match(/^\s*(\||\>)\s*/)) {
        state.literal = true;
        return "meta";
      }
      if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) {
        return "variable";
      }
      if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) {
        return "number";
      }
      if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) {
        return "number";
      }
      if (stream.match(keywordRegex)) {
        return "keyword";
      }
    }
    if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
      state.pair = true;
      state.keyCol = stream.indentation();
      return "atom";
    }
    if (state.pair && stream.match(/^:\s*/)) {
      state.pairStart = true;
      return "meta";
    }
    state.pairStart = false;
    state.escaped = ch == "\\";
    stream.next();
    return null;
  },
  startState: function() {
    return {
      pair: false,
      pairStart: false,
      keyCol: 0,
      inlinePairs: 0,
      inlineList: 0,
      literal: false,
      escaped: false
    };
  },
  languageData: {
    commentTokens: { line: "#" }
  }
};
const customTheme = createTheme({
  theme: "light",
  settings: {
    background: "var(--theme-background-2, var(--default-theme-background-2))",
    foreground: "var(--theme-color-1, var(--default-theme-color-1))",
    caret: "var(--theme-color-1, var(--default-theme-color-1))",
    selection: "var(--theme-background-3, var(--default-theme-background-3))",
    selectionMatch: "#e3dcce",
    gutterBackground: "var(--theme-background-2, var(--default-theme-background-2))",
    gutterForeground: "var(--theme-color-3, var(--default-theme-color-3))",
    gutterBorder: "transparent",
    lineHighlight: "var(--theme-background-3, var(--default-theme-background-3))",
    fontFamily: "var(--theme-font-code, var(--default-theme-font-code))"
  },
  styles: [
    {
      tag: [tags.standard(tags.tagName), tags.tagName],
      color: "var(--theme-color-purple, var(--default-theme-color-purple))"
    },
    {
      tag: [tags.comment],
      color: "var(--theme-color-3, var(--default-theme-color-3))"
    },
    {
      tag: [tags.className],
      color: "var(--theme-color-orange, var(--default-theme-color-orange))"
    },
    {
      tag: [tags.variableName, tags.propertyName, tags.attributeName],
      color: "var(--theme-color-1, var(--default-theme-color-1))"
    },
    {
      tag: [tags.operator],
      color: "var(--theme-color-2, var(--default-theme-color-2))"
    },
    {
      tag: [tags.keyword, tags.typeName, tags.typeOperator],
      color: "var(--theme-color-green, var(--default-theme-color-green))"
    },
    {
      tag: [tags.string],
      color: "var(--theme-color-blue, var(--default-theme-color-blue))"
    },
    {
      tag: [tags.bracket, tags.regexp, tags.meta],
      color: "var(--theme-color-3, var(--default-theme-color-3))"
    },
    {
      tag: [tags.number],
      color: "var(--theme-color-blue, var(--default-theme-color-blue))"
    },
    {
      tag: [tags.name, tags.quote],
      color: "var(--theme-color-3, var(--default-theme-color-3))"
    },
    {
      tag: [tags.heading],
      color: "var(--theme-color-3, var(--default-theme-color-3))",
      fontWeight: "bold"
    },
    {
      tag: [tags.emphasis],
      color: "var(--theme-color-3, var(--default-theme-color-3))",
      fontStyle: "italic"
    },
    {
      tag: [tags.deleted],
      color: "var(--theme-color-3, var(--default-theme-color-3))",
      backgroundColor: "transparent"
    },
    {
      tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
      color: "var(--theme-color-3, var(--default-theme-color-3))"
    },
    {
      tag: [tags.url, tags.escape, tags.regexp, tags.link],
      color: "var(--theme-color-1, var(--default-theme-color-1))"
    },
    { tag: tags.link, textDecoration: "underline" },
    { tag: tags.strikethrough, textDecoration: "line-through" },
    {
      tag: tags.invalid,
      color: "var(--theme-color-3, var(--default-theme-color-3))"
    }
  ]
});
const useCodeMirror = (parameters) => {
  const { extensions, content, withoutTheme } = parameters;
  const value = ref(content ?? "");
  const codeMirrorRef = ref(null);
  const codeMirror = ref(null);
  watch(codeMirrorRef, () => {
    destroyCodeMirror();
    mountCodeMirror(extensions);
  });
  const mountCodeMirror = (withCustomExtensions) => {
    if (codeMirrorRef.value) {
      const configuration = {
        parent: codeMirrorRef.value,
        extensions: addDefaultExtensions(withCustomExtensions)
      };
      if (content) {
        configuration.doc = content;
      }
      codeMirror.value = new EditorView(configuration);
    }
  };
  const addDefaultExtensions = (newExtensions = []) => {
    const defaultExtensions = [
      withoutTheme ? null : customTheme,
      EditorView.theme({
        ".cm-line": {
          lineHeight: "20px"
        },
        ".cm-gutterElement": {
          lineHeight: "20px"
        }
      })
    ].filter((extension) => extension !== null);
    return [...defaultExtensions, newExtensions];
  };
  const destroyCodeMirror = () => {
    var _a;
    (_a = codeMirror.value) == null ? void 0 : _a.destroy();
  };
  const setCodeMirrorContent = (newValue) => {
    if (!codeMirror.value) {
      return;
    }
    if (value.value === newValue) {
      return;
    }
    value.value = newValue ?? "";
    if (codeMirror.value.state.doc.toString() === value.value) {
      return;
    }
    codeMirror.value.dispatch({
      changes: {
        from: 0,
        to: codeMirror.value.state.doc.length,
        insert: newValue
      },
      selection: {
        anchor: Math.min(
          codeMirror.value.state.selection.main.anchor,
          value.value.length
        )
      }
    });
  };
  const reconfigureCodeMirror = (newExtensions) => {
    if (!codeMirror.value) {
      return;
    }
    codeMirror.value.dispatch({
      effects: StateEffect.reconfigure.of(addDefaultExtensions(newExtensions))
    });
  };
  const restartCodeMirror = (newExtensions) => {
    destroyCodeMirror();
    mountCodeMirror(newExtensions);
  };
  return {
    /**
     * The current value
     */
    value,
    /**
     * An empty reference used to mount CodeMirror when bound to the DOM.
     */
    codeMirrorRef,
    /**
     * The CodeMirror instance.
     */
    // @ts-ignore
    codeMirror,
    /**
     * Replaces the current content with the given value.
     */
    setCodeMirrorContent,
    /**
     * Reconfigure the used extensions.
     */
    reconfigureCodeMirror,
    /**
     * Restarts CodeMirror (destroy + mount)
     */
    restartCodeMirror
  };
};
const variableHighlighterDecoration = new MatchDecorator({
  regexp: /(\{[^}]+\})/g,
  decoration: () => Decoration.mark({
    attributes: {
      class: "scalar-api-client__variable"
    }
  })
});
const variables = () => ViewPlugin.fromClass(
  class {
    constructor(view) {
      __publicField(this, "variables");
      this.variables = variableHighlighterDecoration.createDeco(view);
    }
    update(update) {
      this.variables = variableHighlighterDecoration.updateDeco(
        update,
        this.variables
      );
    }
  },
  {
    decorations: (instance) => instance.variables,
    provide: (plugin) => EditorView$1.atomicRanges.of(
      (view) => {
        var _a;
        return ((_a = view.plugin(plugin)) == null ? void 0 : _a.variables) || Decoration.none;
      }
    )
  }
);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "CodeMirror",
  props: {
    name: {},
    extensions: {},
    content: {},
    readOnly: { type: Boolean },
    languages: {},
    withVariables: { type: Boolean },
    lineNumbers: { type: Boolean },
    withoutTheme: { type: Boolean },
    disableEnter: { type: Boolean, default: false }
  },
  emits: ["change"],
  setup(__props, { expose: __expose, emit }) {
    const props = __props;
    const syntaxHighlighting = {
      c: StreamLanguage.define(c),
      clojure: StreamLanguage.define(clojure),
      csharp: StreamLanguage.define(csharp),
      go: StreamLanguage.define(go),
      http: StreamLanguage.define(http),
      html: html(),
      java: java(),
      javascript: javascript(),
      json: json(),
      kotlin: StreamLanguage.define(kotlin),
      node: javascript(),
      objc: StreamLanguage.define(objectiveC),
      ocaml: StreamLanguage.define(oCaml),
      powershell: StreamLanguage.define(powerShell),
      python: python(),
      r: StreamLanguage.define(r),
      ruby: StreamLanguage.define(ruby),
      shell: StreamLanguage.define(shell),
      swift: StreamLanguage.define(swift),
      yaml: StreamLanguage.define(yaml)
    };
    const classes = ["scalar-api-client__codemirror"];
    if (props.readOnly) {
      classes.push("scalar-api-client__codemirror--read-only");
    }
    const getCodeMirrorExtensions = () => {
      const extensions = [];
      extensions.push(EditorView$1.editorAttributes.of({ class: classes.join(" ") }));
      if (props.extensions) {
        props.extensions.forEach((extension) => {
          extensions.push(toRaw(extension));
        });
      }
      if (props.readOnly) {
        extensions.push(EditorView$1.editable.of(false));
      }
      if (props.languages) {
        props.languages.filter((language) => typeof syntaxHighlighting[language] !== "undefined").forEach((language) => {
          extensions.push(syntaxHighlighting[language]);
        });
      }
      if (props.lineNumbers) {
        extensions.push(lineNumbers());
      }
      if (props.withVariables) {
        extensions.push(variables());
      }
      if (props.disableEnter) {
        extensions.push(
          keymap.of([
            {
              key: "Enter",
              run: () => {
                return true;
              }
            },
            {
              key: "Ctrl-Enter",
              mac: "Cmd-Enter",
              run: () => {
                return true;
              }
            },
            {
              key: "Shift-Enter",
              run: () => {
                return true;
              }
            }
          ])
        );
      }
      extensions.push(
        EditorView$1.updateListener.of((v) => {
          if (!v.docChanged) {
            return;
          }
          emit("change", v.state.doc.toString());
        })
      );
      return extensions;
    };
    const {
      codeMirrorRef,
      setCodeMirrorContent,
      reconfigureCodeMirror,
      restartCodeMirror
    } = useCodeMirror({
      content: props.content ?? "",
      extensions: getCodeMirrorExtensions(),
      withoutTheme: props.withoutTheme
    });
    watch(
      () => props.content,
      () => {
        setCodeMirrorContent(props.content);
      }
    );
    watch(
      () => props.name,
      () => {
        restartCodeMirror(getCodeMirrorExtensions());
      }
    );
    watch(
      [
        () => props.disableEnter,
        () => props.languages,
        () => props.lineNumbers,
        () => props.readOnly,
        () => props.withoutTheme,
        () => props.withVariables
      ],
      () => {
        reconfigureCodeMirror(getCodeMirrorExtensions());
      }
    );
    __expose({
      setCodeMirrorContent
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "codeMirrorRef",
        ref: codeMirrorRef,
        class: "scalar-api-client__codemirror__wrapper"
      }, null, 512);
    };
  }
});
const CodeMirror_vue_vue_type_style_index_0_lang = "";
export {
  _sfc_main as CodeMirror,
  useCodeMirror
};
