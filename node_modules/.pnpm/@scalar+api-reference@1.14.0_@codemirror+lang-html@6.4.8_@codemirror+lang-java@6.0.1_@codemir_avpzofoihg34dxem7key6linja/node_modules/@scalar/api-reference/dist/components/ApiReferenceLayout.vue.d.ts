import { type ThemeId } from '@scalar/themes';
import type { ReferenceConfiguration, ReferenceSlotProps, Spec } from '../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<{
    configuration: ReferenceConfiguration;
    parsedSpec: Spec;
    rawSpec: string;
    swaggerEditorRef?: ({
        new (...args: any[]): {
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: {
                readonly theme?: ThemeId | undefined;
                key?: string | number | symbol | undefined;
                readonly value?: string | undefined;
                style?: unknown;
                class?: unknown;
                ref?: import("vue").VNodeRef | undefined;
                ref_for?: boolean | undefined;
                ref_key?: string | undefined;
                onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                readonly proxyUrl?: string | undefined;
                readonly error?: string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null | undefined;
                onChangeTheme?: ((value: ThemeId) => any) | undefined;
                onImport?: ((value: string) => any) | undefined;
                onContentUpdate?: ((value: string) => any) | undefined;
            };
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot<any> | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
            $emit: ((event: "changeTheme", value: ThemeId) => void) & ((event: "contentUpdate", value: string) => void) & ((event: "import", value: string) => void);
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                value: {
                    type: import("vue").PropType<string>;
                };
                theme: {
                    type: import("vue").PropType<ThemeId>;
                };
                proxyUrl: {
                    type: import("vue").PropType<string>;
                };
                error: {
                    type: import("vue").PropType<string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null>;
                };
            }>> & {
                onImport?: ((value: string) => any) | undefined;
                onContentUpdate?: ((value: string) => any) | undefined;
                onChangeTheme?: ((value: ThemeId) => any) | undefined;
            }, {
                handleOpenSwaggerEditor: (action?: import("@scalar/swagger-editor").OpenSwaggerEditorActions | undefined) => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
                contentUpdate: (value: string) => void;
                import: (value: string) => void;
                changeTheme: (value: ThemeId) => void;
            }, string, {}, {}, string, {}> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: import("vue").PropType<string>;
            };
            theme: {
                type: import("vue").PropType<ThemeId>;
            };
            proxyUrl: {
                type: import("vue").PropType<string>;
            };
            error: {
                type: import("vue").PropType<string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null>;
            };
        }>> & {
            onImport?: ((value: string) => any) | undefined;
            onContentUpdate?: ((value: string) => any) | undefined;
            onChangeTheme?: ((value: ThemeId) => any) | undefined;
        } & import("vue").ShallowUnwrapRef<{
            handleOpenSwaggerEditor: (action?: import("@scalar/swagger-editor").OpenSwaggerEditorActions | undefined) => void;
        }> & {} & import("vue").ComponentCustomProperties & {};
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: import("vue").PropType<string>;
        };
        theme: {
            type: import("vue").PropType<ThemeId>;
        };
        proxyUrl: {
            type: import("vue").PropType<string>;
        };
        error: {
            type: import("vue").PropType<string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null>;
        };
    }>> & {
        onImport?: ((value: string) => any) | undefined;
        onContentUpdate?: ((value: string) => any) | undefined;
        onChangeTheme?: ((value: ThemeId) => any) | undefined;
    }, {
        handleOpenSwaggerEditor: (action?: import("@scalar/swagger-editor").OpenSwaggerEditorActions | undefined) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        contentUpdate: (value: string) => void;
        import: (value: string) => void;
        changeTheme: (value: ThemeId) => void;
    }, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            "tab-items"?(_: {}): any;
            "editor-input"?(_: {
                ref: string;
                value: string | undefined;
                contentUpdate: (value: string) => void;
            }): any;
        };
    })) | null | undefined;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    changeTheme: (value: ThemeId) => void;
    updateContent: (value: string) => void;
    toggleDarkMode: () => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
    configuration: ReferenceConfiguration;
    parsedSpec: Spec;
    rawSpec: string;
    swaggerEditorRef?: ({
        new (...args: any[]): {
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: {
                readonly theme?: ThemeId | undefined;
                key?: string | number | symbol | undefined;
                readonly value?: string | undefined;
                style?: unknown;
                class?: unknown;
                ref?: import("vue").VNodeRef | undefined;
                ref_for?: boolean | undefined;
                ref_key?: string | undefined;
                onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                readonly proxyUrl?: string | undefined;
                readonly error?: string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null | undefined;
                onChangeTheme?: ((value: ThemeId) => any) | undefined;
                onImport?: ((value: string) => any) | undefined;
                onContentUpdate?: ((value: string) => any) | undefined;
            };
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot<any> | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
            $emit: ((event: "changeTheme", value: ThemeId) => void) & ((event: "contentUpdate", value: string) => void) & ((event: "import", value: string) => void);
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                value: {
                    type: import("vue").PropType<string>;
                };
                theme: {
                    type: import("vue").PropType<ThemeId>;
                };
                proxyUrl: {
                    type: import("vue").PropType<string>;
                };
                error: {
                    type: import("vue").PropType<string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null>;
                };
            }>> & {
                onImport?: ((value: string) => any) | undefined;
                onContentUpdate?: ((value: string) => any) | undefined;
                onChangeTheme?: ((value: ThemeId) => any) | undefined;
            }, {
                handleOpenSwaggerEditor: (action?: import("@scalar/swagger-editor").OpenSwaggerEditorActions | undefined) => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
                contentUpdate: (value: string) => void;
                import: (value: string) => void;
                changeTheme: (value: ThemeId) => void;
            }, string, {}, {}, string, {}> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: import("vue").PropType<string>;
            };
            theme: {
                type: import("vue").PropType<ThemeId>;
            };
            proxyUrl: {
                type: import("vue").PropType<string>;
            };
            error: {
                type: import("vue").PropType<string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null>;
            };
        }>> & {
            onImport?: ((value: string) => any) | undefined;
            onContentUpdate?: ((value: string) => any) | undefined;
            onChangeTheme?: ((value: ThemeId) => any) | undefined;
        } & import("vue").ShallowUnwrapRef<{
            handleOpenSwaggerEditor: (action?: import("@scalar/swagger-editor").OpenSwaggerEditorActions | undefined) => void;
        }> & {} & import("vue").ComponentCustomProperties & {};
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: import("vue").PropType<string>;
        };
        theme: {
            type: import("vue").PropType<ThemeId>;
        };
        proxyUrl: {
            type: import("vue").PropType<string>;
        };
        error: {
            type: import("vue").PropType<string | import("vue").Ref<string> | import("vue").ComputedRef<string> | null>;
        };
    }>> & {
        onImport?: ((value: string) => any) | undefined;
        onContentUpdate?: ((value: string) => any) | undefined;
        onChangeTheme?: ((value: ThemeId) => any) | undefined;
    }, {
        handleOpenSwaggerEditor: (action?: import("@scalar/swagger-editor").OpenSwaggerEditorActions | undefined) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        contentUpdate: (value: string) => void;
        import: (value: string) => void;
        changeTheme: (value: ThemeId) => void;
    }, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            "tab-items"?(_: {}): any;
            "editor-input"?(_: {
                ref: string;
                value: string | undefined;
                contentUpdate: (value: string) => void;
            }): any;
        };
    })) | null | undefined;
}>>> & {
    onToggleDarkMode?: (() => any) | undefined;
    onChangeTheme?: ((value: ThemeId) => any) | undefined;
    onUpdateContent?: ((value: string) => any) | undefined;
}, {}, {}>, Readonly<{
    footer: (props: ReferenceSlotProps) => any;
    header: (props: ReferenceSlotProps) => any;
    editor: (props: ReferenceSlotProps) => any;
    "content-start": (props: ReferenceSlotProps) => any;
    "content-end": (props: ReferenceSlotProps) => any;
    "sidebar-start": (props: ReferenceSlotProps) => any;
    "sidebar-end": (props: ReferenceSlotProps) => any;
}>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ApiReferenceLayout.vue.d.ts.map