function u(s) {
  return s.reduce((t, e) => (t[e.name] = e.value, t), {});
}
function p(s) {
  return /\s|-/.test(s);
}
function h(s, t = 0) {
  let e = [], n = " ".repeat(t), o = " ".repeat(t + 2);
  for (const [c, a] of Object.entries(s)) {
    let d = p(c) ? `'${c}'` : c;
    if (Array.isArray(a)) {
      const i = a.map((r) => typeof r == "string" ? `'${r}'` : r && typeof r == "object" ? h(r, t + 2) : r).join(`, ${o}`);
      e.push(`${o}${d}: [${i}]`);
    } else if (a && typeof a == "object")
      e.push(
        `${o}${d}: ${h(
          a,
          t + 2
        )}`
      );
    else if (typeof a == "string") {
      let i = `${a}`;
      if (a.startsWith("JSON.stringify")) {
        const r = a.split(`
`);
        r.length > 1 && (i = r.map((f, l) => l === 0 ? f : `${o}${f}`).join(`
`));
      } else
        i = `'${a}'`;
      e.push(`${o}${d}: ${i}`);
    } else
      e.push(`${o}${d}: ${a}`);
  }
  return `{
${e.join(`,
`)}
${n}}`;
}
function $(s) {
  var d, i;
  const t = {
    method: "GET",
    ...s
  };
  t.method = t.method.toUpperCase();
  const e = {
    method: t.method === "GET" ? void 0 : t.method
  }, n = new URLSearchParams(
    t.queryString ? u(t.queryString) : void 0
  ), o = n.size ? `?${n.toString()}` : "";
  (d = t.headers) != null && d.length && (e.headers = {}, t.headers.forEach((r) => {
    e.headers[r.name] = r.value;
  })), (i = t.cookies) != null && i.length && (e.headers = e.headers || {}, t.cookies.forEach((r) => {
    e.headers["Set-Cookie"] = e.headers["Set-Cookie"] ? `${e.headers["Set-Cookie"]}; ${r.name}=${r.value}` : `${r.name}=${r.value}`;
  })), Object.keys(e).forEach((r) => {
    e[r] === void 0 && delete e[r];
  }), t.postData && (e.body = t.postData.text, t.postData.mimeType === "application/json" && (e.body = `JSON.stringify(${h(JSON.parse(e.body))})`));
  const c = Object.keys(e).length ? `, ${h(e)}` : "";
  return {
    target: "node",
    client: "undici",
    code: `import { request } from 'undici'

const { statusCode, body } = await request('${t.url}${o}'${c})`
  };
}
function g(s) {
  var d, i;
  const t = {
    method: "GET",
    ...s
  };
  t.method = t.method.toUpperCase();
  const e = {
    method: t.method === "GET" ? void 0 : t.method
  }, n = new URLSearchParams(
    t.queryString ? u(t.queryString) : void 0
  ), o = n.size ? `?${n.toString()}` : "";
  (d = t.headers) != null && d.length && (e.headers = {}, t.headers.forEach((r) => {
    e.headers[r.name] = r.value;
  })), (i = t.cookies) != null && i.length && (e.headers = e.headers || {}, t.cookies.forEach((r) => {
    e.headers["Set-Cookie"] = e.headers["Set-Cookie"] ? `${e.headers["Set-Cookie"]}; ${r.name}=${r.value}` : `${r.name}=${r.value}`;
  })), Object.keys(e).forEach((r) => {
    e[r] === void 0 && delete e[r];
  }), t.postData && (e.body = t.postData.text, t.postData.mimeType === "application/json" && (e.body = `JSON.stringify(${h(
    JSON.parse(e.body)
  )})`));
  const c = Object.keys(e).length ? `, ${h(e)}` : "";
  return {
    target: "node",
    client: "fetch",
    code: `fetch('${t.url}${o}'${c})`
  };
}
function m(s) {
  var d, i;
  const t = {
    method: "GET",
    ...s
  };
  t.method = t.method.toUpperCase();
  const e = {
    method: t.method === "GET" ? void 0 : t.method
  }, n = new URLSearchParams(
    t.queryString ? u(t.queryString) : void 0
  ), o = n.size ? `?${n.toString()}` : "";
  (d = t.headers) != null && d.length && (e.headers = {}, t.headers.forEach((r) => {
    e.headers[r.name] = r.value;
  })), (i = t.cookies) != null && i.length && (e.headers = e.headers || {}, t.cookies.forEach((r) => {
    e.headers["Set-Cookie"] = e.headers["Set-Cookie"] ? `${e.headers["Set-Cookie"]}; ${r.name}=${r.value}` : `${r.name}=${r.value}`;
  })), Object.keys(e).forEach((r) => {
    e[r] === void 0 && delete e[r];
  }), t.postData && (e.body = t.postData.text, t.postData.mimeType === "application/json" && (e.body = `JSON.stringify(${h(
    JSON.parse(e.body)
  )})`));
  const c = Object.keys(e).length ? `, ${h(e)}` : "";
  return {
    target: "js",
    client: "fetch",
    code: `fetch('${t.url}${o}'${c})`
  };
}
function y() {
  const s = [$, g, m];
  return {
    get(t, e, n) {
      const o = this.findPlugin(t, e);
      if (o)
        return o(n);
    },
    print(t, e, n) {
      var o;
      return (o = this.get(t, e, n)) == null ? void 0 : o.code;
    },
    targets() {
      return s.map((t) => t().target).filter((t, e, n) => n.indexOf(t) === e);
    },
    clients() {
      return s.map((t) => t().client);
    },
    plugins() {
      return s.map((t) => {
        const e = t();
        return {
          target: e.target,
          client: e.client
        };
      });
    },
    findPlugin(t, e) {
      return s.find((n) => {
        const o = n();
        return o.target === t && o.client === e;
      });
    },
    hasPlugin(t, e) {
      return !!this.findPlugin(t, e);
    }
  };
}
export {
  y as snippetz
};
