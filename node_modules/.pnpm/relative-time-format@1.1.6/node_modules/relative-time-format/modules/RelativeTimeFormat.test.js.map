{"version":3,"file":"RelativeTimeFormat.test.js","names":["RelativeTimeFormat","ccp","type","de","en","ru","to","ar_AE","pt","pt_PT","zh","tiny","addLocale","setDefaultLocale","describe","it","expect","style","numeric","rtf","format","equal","formatToParts","Symbol","localeMatcher","Number","isFinite","Infinity","undefined","pluralRules","NumberFormat","Intl","enLongDay","day","previous","current","next","deep","value","unit","prototype","numberFormat","supportedLocalesOf","should","timeZone","resolvedOptions","locale","numberingSystem","originalNarrowSecondLabels","narrow","second"],"sources":["../source/RelativeTimeFormat.test.js"],"sourcesContent":["import RelativeTimeFormat from './RelativeTimeFormat.js'\r\n\r\nimport ccp from '../locale/ccp.json' assert { type: 'json' }\r\nimport de from '../locale/de.json' assert { type: 'json' }\r\nimport en from '../locale/en.json' assert { type: 'json' }\r\nimport ru from '../locale/ru.json' assert { type: 'json' }\r\nimport to from '../locale/to.json' assert { type: 'json' }\r\nimport ar_AE from '../locale/ar-AE.json' assert { type: 'json' }\r\nimport pt from '../locale/pt.json' assert { type: 'json' }\r\nimport pt_PT from '../locale/pt-PT.json' assert { type: 'json' }\r\nimport zh from '../locale/zh.json' assert { type: 'json' }\r\n\r\nen.tiny = {\r\n  \"year\": \"{0}yr\",\r\n  \"month\": \"{0}mo\",\r\n  \"week\": \"{0}wk\",\r\n  \"day\": \"{0}d\",\r\n  \"hour\": \"{0}h\",\r\n  \"minute\": \"{0}m\",\r\n  \"second\": \"{0}s\",\r\n  \"now\": \"now\"\r\n}\r\n\r\nRelativeTimeFormat.addLocale(ccp)\r\nRelativeTimeFormat.addLocale(de)\r\nRelativeTimeFormat.addLocale(en)\r\nRelativeTimeFormat.addLocale(ru)\r\nRelativeTimeFormat.addLocale(to)\r\nRelativeTimeFormat.addLocale(ar_AE)\r\nRelativeTimeFormat.addLocale(pt)\r\nRelativeTimeFormat.addLocale(pt_PT)\r\nRelativeTimeFormat.addLocale(zh)\r\n\r\n// Just so this function code is covered.\r\n// It's \"en\" by default.\r\nRelativeTimeFormat.setDefaultLocale('en')\r\n\r\ndescribe('Intl.RelativeTimeFormat', () => {\r\n  it('should validate options', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { style: \"postmodern\" })).to.throw(\"Invalid \\\"style\\\" option\")\r\n    expect(() => new RelativeTimeFormat(\"en\", { numeric: \"sometimes\" })).to.throw(\"Invalid \\\"numeric\\\" option\")\r\n  })\r\n\r\n  it('should fall back to default locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  it('should throw when \"numeric\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { numeric: \"sometimes\" })).to.throw('Invalid \"numeric\" option')\r\n  })\r\n\r\n  it('should validate \"unit\" argument', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(() => rtf.format(-1)).to.throw('\"unit\" argument is required')\r\n    expect(() => rtf.formatToParts(-1)).to.throw('\"unit\" argument is required')\r\n    expect(() => rtf.format(-1, 0)).to.throw('Invalid \"unit\" argument')\r\n    if (typeof Symbol !== 'undefined') {\r\n      expect(() => rtf.format(-1, Symbol())).to.throw('Invalid \"unit\" argument')\r\n    }\r\n  })\r\n\r\n  it('should use the passed \"style\" option', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\", { style: \"short\" })\r\n    expect(rtf.format(-1, \"year\")).to.equal(\"1 yr. ago\")\r\n  })\r\n\r\n  it('should throw when \"style\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { style: \"postmodern\" })).to.throw('Invalid \"style\" option')\r\n  })\r\n\r\n  it('should use the passed \"localeMatcher\" option', () => {\r\n    const rtf = new RelativeTimeFormat(\"en-XX\", { localeMatcher: \"lookup\" })\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  it('should throw when \"localeMatcher\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { localeMatcher: \"eccentric\" })).to.throw('Invalid \"localeMatcher\" option')\r\n  })\r\n\r\n  it('should throw if no supported locale was found', () => {\r\n    RelativeTimeFormat.setDefaultLocale('xx')\r\n    expect(() => new RelativeTimeFormat()).to.throw(\"No supported locale was found\")\r\n    RelativeTimeFormat.setDefaultLocale('en')\r\n  })\r\n\r\n  it('should format relative time', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n    expect(rtf.format(2.15, \"day\")).to.equal(\"in 2.15 days\")\r\n    expect(rtf.format(100, \"day\")).to.equal(\"in 100 days\")\r\n  })\r\n\r\n  it('should throw for non-finite numbers', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    // Test with `Number.isFinite`.\r\n    if (Number.isFinite) {\r\n      expect(() => rtf.format(-Infinity, \"day\")).to.throw(\"Invalid \\\"number\\\" argument\")\r\n    }\r\n    // Test without `Number.isFinite`.\r\n    const isFinite = Number.isFinite\r\n    Number.isFinite = undefined\r\n    expect(rtf.format(-Infinity, \"day\")).to.equal(\"∞ days ago\")\r\n    Number.isFinite = isFinite\r\n  })\r\n\r\n  it('should handle cases when no plural rules function is available for a locale', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(-1, \"second\")).to.equal(\"1 second ago\")\r\n    expect(rtf.format(-2, \"second\")).to.equal(\"2 seconds ago\")\r\n    // Emulate a non-supported locale.\r\n    // There seems to be no such locale in CLDR\r\n    // for which \"plural rules\" function is missing.\r\n    rtf.pluralRules = undefined\r\n    expect(rtf.format(-1, \"second\")).to.equal(\"1 seconds ago\")\r\n    expect(rtf.format(-2, \"second\")).to.equal(\"2 seconds ago\")\r\n  })\r\n\r\n  it('should fall back to \"other\" quantifier if others have been removed as an optimization', () => {\r\n    const rtf = new RelativeTimeFormat(\"ru\")\r\n    // `2` is classified as \"few\" in Russian.\r\n    // The rule for \"few\" is identical to that for \"other\"\r\n    // so the rule for \"few\" is omitted from locale data\r\n    // to reduce bundle size.\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 дня назад\")\r\n  })\r\n\r\n  it('should throw if a time unit is unsupported', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(() => rtf.format(-1, \"decade\")).to.throw(\"Invalid \\\"unit\\\" argument: decade\")\r\n  })\r\n\r\n  it('should format yesterday/today/tomorrow', () => {\r\n    const rtf = new RelativeTimeFormat(\"de\", { numeric: \"auto\" })\r\n\r\n    // \"today\" is useless for relative time labels.\r\n    // E.g. for `23:59:00` \"today\" is too vague.\r\n    // And for `00:01:00` \"today\" is counter-intuitive.\r\n    // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n    // E.g. \"yesterday\" of `00:01` is misleading.\r\n    // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n    // Not to mention that both of them are too \"vague\", same as \"today\".\r\n    // Also there are no rules defining when to use\r\n    // \"yesterday\", \"today\" and \"tomorrow\".\r\n    // The algorithm should take local time into account.\r\n\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"vorgestern\")\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"gestern\")\r\n    expect(rtf.format(0, \"day\")).to.equal(\"heute\")\r\n    expect(rtf.format(1, \"day\")).to.equal(\"morgen\")\r\n    expect(rtf.format(2, \"day\")).to.equal(\"übermorgen\")\r\n\r\n    expect(rtf.format(0, \"second\")).to.equal(\"jetzt\")\r\n  })\r\n\r\n  it('should use \"Intl.NumberFormat\" (when available)', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(1000, \"day\")).to.equal(\"in 1,000 days\")\r\n  })\r\n\r\n  it('should fall back when \"Intl.NumberFormat\" is not available', () => {\r\n    const NumberFormat = Intl.NumberFormat\r\n    // I imagine `Intl` object getting \"frozen\" in future.\r\n    delete Intl.NumberFormat\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(1000, \"day\")).to.equal(\"in 1000 days\")\r\n    Intl.NumberFormat = NumberFormat\r\n  })\r\n\r\n  it('shouldn\\'t format yesterday/today/tomorrow when there\\'s no locale data', () => {\r\n    const enLongDay = { ...en.long.day }\r\n    delete en.long.day.previous\r\n    delete en.long.day.current\r\n    delete en.long.day.next\r\n\r\n    const rtf = new RelativeTimeFormat(\"en\", { numeric: \"auto\" })\r\n\r\n    // \"today\" is useless for relative time labels.\r\n    // E.g. for `23:59:00` \"today\" is too vague.\r\n    // And for `00:01:00` \"today\" is counter-intuitive.\r\n    // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n    // E.g. \"yesterday\" of `00:01` is misleading.\r\n    // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n    // Not to mention that both of them are too \"vague\", same as \"today\".\r\n    // Also there are no rules defining when to use\r\n    // \"yesterday\", \"today\" and \"tomorrow\".\r\n    // The algorithm should take local time into account.\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(0, \"day\")).to.equal(\"in 0 days\")\r\n    expect(rtf.format(1, \"day\")).to.equal(\"in 1 day\")\r\n\r\n    en.long.day = enLongDay\r\n  })\r\n\r\n  it('should accept an array of locales', () => {\r\n    const rtf = new RelativeTimeFormat([\"en\"])\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should resolve locales as \"best fit\"', () => {\r\n    const rtf = new RelativeTimeFormat('en-XX')\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should fallback to default system locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should support plural units', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-2, \"days\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should support negative zero', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(0, \"day\")).to.equal(\"in 0 days\")\r\n    expect(rtf.format(-0, \"day\")).to.equal(\"0 days ago\")\r\n    expect(rtf.formatToParts(-0, \"second\")).to.deep.equal([\r\n      { type: \"integer\", value: \"0\", unit: \"second\" },\r\n      { type: \"literal\", value: \" seconds ago\" }\r\n    ])\r\n  })\r\n\r\n  it('should support string numbers', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(\"0\", \"day\")).to.equal(\"in 0 days\")\r\n  })\r\n\r\n  it('should format to parts', () => {\r\n    let rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    // `Intl.NumberFormat` doesn't have `formatToParts()`\r\n    // in Node.js version 9.x.\r\n    // In Node.js version 12.x it does have that method.\r\n    if (Intl.NumberFormat.prototype.formatToParts) {\r\n      // Test with `Intl.NumberFormat.prototype.formatToParts`.\r\n      expect(rtf.formatToParts(1000, \"day\")).to.deep.equal([\r\n        { type: \"literal\", value: \"in \" },\r\n        { type: \"integer\", value: \"1\", unit: \"day\" },\r\n        { type: \"group\", value: \",\", unit: \"day\" },\r\n        { type: \"integer\", value: \"000\", unit: \"day\" },\r\n        { type: \"literal\", value: \" days\" }\r\n      ])\r\n      // Test without `Intl.NumberFormat.prototype.formatToParts`.\r\n      const numberFormat = rtf.numberFormat\r\n      rtf.numberFormat = undefined\r\n      expect(rtf.formatToParts(1000, \"day\")).to.deep.equal([\r\n        { type: \"literal\", value: \"in \" },\r\n        { type: \"integer\", value: \"1000\", unit: \"day\" },\r\n        { type: \"literal\", value: \" days\" }\r\n      ])\r\n      rtf.numberFormat = numberFormat\r\n    }\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days\" }\r\n    ])\r\n\r\n    expect(rtf.formatToParts(-100, \"day\")).to.deep.equal([\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days ago\" }\r\n    ])\r\n  })\r\n\r\n  it('should format to parts with numeric=\"auto\"', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\", { numeric: \"auto\" })\r\n\r\n    expect(rtf.formatToParts(-1, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"yesterday\" }\r\n    ])\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days\" }\r\n    ])\r\n  })\r\n\r\n  it('should format to parts (non-English)', () => {\r\n    // Tonga (Tonga Islands)\r\n    const rtf = new RelativeTimeFormat(\"to\")\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"ʻi he ʻaho ʻe \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" }\r\n    ])\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should list supported locales', function() {\r\n    expect(RelativeTimeFormat.supportedLocalesOf(['es-ES', 'ru', 'ru-XX', 'en-GB']))\r\n      .to.deep.equal(['ru', 'ru-XX', 'en-GB'])\r\n    expect(RelativeTimeFormat.supportedLocalesOf('ru-XX')).to.deep.equal(['ru-XX'])\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should throw when \"locales\" argument is not valid', () => {\r\n    expect(() => RelativeTimeFormat.supportedLocalesOf(123)).to.throw(\"Invalid \\\"locales\\\" argument\")\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should throw when \"localeMatcher\" option is not a valid one', () => {\r\n    expect(() => RelativeTimeFormat.supportedLocalesOf([\"en\"], { localeMatcher: \"eccentric\" })).to.throw('Invalid \"localeMatcher\" option')\r\n  })\r\n\r\n  it('should quantify as \"other\" when no quantifier function is present for a locale', () => {\r\n    new RelativeTimeFormat(\"ccp\").format(1, \"quarter\").should.equal(\"𑄷 𑄖𑄨𑄚𑄟𑄏𑄬\")\r\n  })\r\n\r\n  it('should use quantify for a language of a specific locale', () => {\r\n    // Will use `quantify` for \"ar\" language.\r\n    new RelativeTimeFormat(\"ar-AE\").format(-1, \"year\").should.equal(\"قبل سنة واحدة\")\r\n    new RelativeTimeFormat(\"ar-AE\").format(-2, \"year\").should.equal(\"قبل سنتين\")\r\n\r\n    // Uses local digits:\r\n    // new RelativeTimeFormat(\"ar-AE\").format(-3, \"year\").should.equal(\"قبل ٣ سنوات\")\r\n\r\n    // Uses generic ANSI 0-9 digits:\r\n    new RelativeTimeFormat(\"ar-AE\").format(-3, \"year\").should.equal(\"قبل 3 سنوات\")\r\n\r\n    // Uses local digits:\r\n    // new RelativeTimeFormat(\"ar-AE\").format(-1.23, \"year\").should.equal(\"قبل ١٫٢٣ سنة\")\r\n\r\n    // Uses generic ANSI 0-9 digits:\r\n    new RelativeTimeFormat(\"ar-AE\").format(-1.23, \"year\").should.equal(\"قبل 1.23 سنة\")\r\n  })\r\n\r\n  it('should use correct quantify for Portuguese (\"pt\") and European Portuguese (\"pt-PT\")', () => {\r\n    new RelativeTimeFormat(\"pt\").format(1.5, \"day\").should.equal(\"em 1,5 dia\")\r\n    new RelativeTimeFormat(\"pt-PT\").format(1.5, \"day\").should.equal(\"dentro de 1,5 dias\")\r\n  })\r\n\r\n  it('should show resolved options', () => {\r\n    expect(new RelativeTimeFormat('ru-XX', { timeZone: 'UTC' }).resolvedOptions()).to.deep.equal({\r\n      locale: \"ru\",\r\n      style: \"long\",\r\n      numeric: \"always\",\r\n      numberingSystem: \"latn\"\r\n    })\r\n  })\r\n\r\n  it('should support short labels definition (like the ones used `javascript-time-ago`) (not used)', () => {\r\n    const originalNarrowSecondLabels = en.narrow.second\r\n    en.narrow.second = '{0}s'\r\n    expect(new RelativeTimeFormat(\"en\", { style: \"narrow\" }).format(-1, \"second\")).to.equal(\"1s\")\r\n    en.narrow.second = originalNarrowSecondLabels\r\n  })\r\n\r\n  // Node.js 11.x seems to not support `zh-Hans-CN` on `Intl.NumberFormat` for some reason.\r\n  // it('should support non-\"latn\" numbering systems', () => {\r\n  //   // the nu extension key requests a numbering system, e.g. Chinese decimal\r\n  //   expect(new RelativeTimeFormat('zh-Hans-CN-u-nu-hanidec').format(-123456.789, \"day\")).to.equal(\"一二三,四五六.七八九\")\r\n  //   expect(new RelativeTimeFormat('zh-Hans-CN').format(-123456.789, \"day\")).to.equal(\"123,456.789 days ago\")\r\n  // })\r\n})"],"mappings":"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"}