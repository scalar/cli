{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { clsx } from \"clsx\";\n\n/* Types\n  ============================================ */\n\n/* clsx\n  ---------------------------------- */\n\n// When compiling with `declaration: true`, many projects experience the dreaded\n// TS2742 error. To combat this, we copy clsx's types manually.\n// Should this project move to JSDoc, this workaround would no longer be needed.\n\ntype ClassValue =\n  | ClassArray\n  | ClassDictionary\n  | string\n  | number\n  | null\n  | boolean\n  | undefined;\ntype ClassDictionary = Record<string, any>;\ntype ClassArray = ClassValue[];\n\n/* Utils\n  ---------------------------------- */\n\ntype OmitUndefined<T> = T extends undefined ? never : T;\ntype StringToBoolean<T> = T extends \"true\" | \"false\" ? boolean : T;\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (\n  k: infer I\n) => void\n  ? I\n  : never;\n\nexport type VariantProps<Component extends (...args: any) => any> = Omit<\n  OmitUndefined<Parameters<Component>[0]>,\n  \"class\" | \"className\"\n>;\n\n/* compose\n  ---------------------------------- */\n\nexport interface Compose {\n  <T extends ReturnType<CVA>[]>(...components: [...T]): (\n    props?: (\n      | UnionToIntersection<\n          {\n            [K in keyof T]: VariantProps<T[K]>;\n          }[number]\n        >\n      | undefined\n    ) &\n      CVAClassProp\n  ) => string;\n}\n\n/* cx\n  ---------------------------------- */\n\nexport interface CX {\n  (...inputs: ClassValue[]): string;\n}\n\nexport type CXOptions = Parameters<CX>;\nexport type CXReturn = ReturnType<CX>;\n\n/* cva\n  ============================================ */\n\ntype CVAConfigBase = { base?: ClassValue };\ntype CVAVariantShape = Record<string, Record<string, ClassValue>>;\ntype CVAVariantSchema<V extends CVAVariantShape> = {\n  [Variant in keyof V]?: StringToBoolean<keyof V[Variant]> | undefined;\n};\ntype CVAClassProp =\n  | {\n      class?: ClassValue;\n      className?: never;\n    }\n  | {\n      class?: never;\n      className?: ClassValue;\n    };\n\nexport interface CVA {\n  <\n    _ extends \"cva's generic parameters are restricted to internal use only.\",\n    V\n  >(\n    config: V extends CVAVariantShape\n      ? CVAConfigBase & {\n          variants?: V;\n          compoundVariants?: (V extends CVAVariantShape\n            ? (\n                | CVAVariantSchema<V>\n                | {\n                    [Variant in keyof V]?:\n                      | StringToBoolean<keyof V[Variant]>\n                      | StringToBoolean<keyof V[Variant]>[]\n                      | undefined;\n                  }\n              ) &\n                CVAClassProp\n            : CVAClassProp)[];\n          defaultVariants?: CVAVariantSchema<V>;\n        }\n      : CVAConfigBase & {\n          variants?: never;\n          compoundVariants?: never;\n          defaultVariants?: never;\n        }\n  ): (\n    props?: V extends CVAVariantShape\n      ? CVAVariantSchema<V> & CVAClassProp\n      : CVAClassProp\n  ) => string;\n}\n\n/* defineConfig\n  ---------------------------------- */\n\nexport interface DefineConfigOptions {\n  hooks?: {\n    /**\n     * @deprecatedÂ please use `onComplete`\n     */\n    \"cx:done\"?: (className: string) => string;\n    /**\n     * Returns the completed string of concatenated classes/classNames.\n     */\n    onComplete?: (className: string) => string;\n  };\n}\n\nexport interface DefineConfig {\n  (options?: DefineConfigOptions): {\n    compose: Compose;\n    cx: CX;\n    cva: CVA;\n  };\n}\n\n/* Exports\n  ============================================ */\n\nconst falsyToString = <T extends unknown>(value: T) =>\n  typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\n\nexport const defineConfig: DefineConfig = (options) => {\n  const cx: CX = (...inputs) => {\n    if (typeof options?.hooks?.[\"cx:done\"] !== \"undefined\")\n      return options?.hooks[\"cx:done\"](clsx(inputs));\n\n    if (typeof options?.hooks?.onComplete !== \"undefined\")\n      return options?.hooks.onComplete(clsx(inputs));\n\n    return clsx(inputs);\n  };\n\n  const cva: CVA = (config) => (props) => {\n    if (config?.variants == null)\n      return cx(config?.base, props?.class, props?.className);\n\n    const { variants, defaultVariants } = config;\n\n    const getVariantClassNames = Object.keys(variants).map(\n      (variant: keyof typeof variants) => {\n        const variantProp = props?.[variant as keyof typeof props];\n        const defaultVariantProp = defaultVariants?.[variant];\n\n        const variantKey = (falsyToString(variantProp) ||\n          falsyToString(\n            defaultVariantProp\n          )) as keyof typeof variants[typeof variant];\n\n        return variants[variant][variantKey];\n      }\n    );\n\n    const defaultsAndProps = {\n      ...defaultVariants,\n      // remove `undefined` props\n      ...(props &&\n        Object.entries(props).reduce<typeof props>(\n          (acc, [key, value]) =>\n            typeof value === \"undefined\" ? acc : { ...acc, [key]: value },\n          {} as typeof props\n        )),\n    };\n\n    const getCompoundVariantClassNames = config?.compoundVariants?.reduce(\n      (acc, { class: cvClass, className: cvClassName, ...cvConfig }) =>\n        Object.entries(cvConfig).every(([cvKey, cvSelector]) => {\n          const selector =\n            defaultsAndProps[cvKey as keyof typeof defaultsAndProps];\n\n          return Array.isArray(cvSelector)\n            ? cvSelector.includes(selector)\n            : selector === cvSelector;\n        })\n          ? [...acc, cvClass, cvClassName]\n          : acc,\n      [] as ClassValue[]\n    );\n\n    return cx(\n      config?.base,\n      getVariantClassNames,\n      getCompoundVariantClassNames,\n      props?.class,\n      props?.className\n    );\n  };\n\n  const compose: Compose =\n    (...components) =>\n    (props) => {\n      const propsWithoutClass = Object.fromEntries(\n        Object.entries(props || {}).filter(\n          ([key]) => ![\"class\", \"className\"].includes(key)\n        )\n      );\n\n      return cx(\n        components.map((component) => component(propsWithoutClass)),\n        props?.class,\n        props?.className\n      );\n    };\n\n  return {\n    compose,\n    cva,\n    cx,\n  };\n};\n\nexport const { compose, cva, cx } = defineConfig();\n"]}